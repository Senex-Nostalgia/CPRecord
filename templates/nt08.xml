<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>分解质因数</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_comment">// version 1</span>
<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>prime<span class="sh_symbol">,</span> <span class="sh_type">int</span> alpha<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>pr<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> prime<span class="sh_symbol">,</span> al<span class="sh_symbol">[</span>cnt<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> alpha<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// version 2</span>
<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>prime<span class="sh_symbol">,</span> <span class="sh_type">int</span> alpha<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	map<span class="sh_symbol">::</span><span class="sh_usertype">iterator</span><span class="sh_normal"> </span>it <span class="sh_symbol">=</span> result<span class="sh_symbol">.</span><span class="sh_function">find</span><span class="sh_symbol">(</span>prime<span class="sh_symbol">);</span>
	it <span class="sh_symbol">==</span> result<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">()</span> <span class="sh_symbol">?</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)</span>result<span class="sh_symbol">.</span><span class="sh_function">emplace</span><span class="sh_symbol">(</span>prime<span class="sh_symbol">,</span> alpha<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)(</span>it<span class="sh_symbol">-&gt;</span>second <span class="sh_symbol">+=</span> alpha<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">factor</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>n<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">;</span> cnt <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_comment">// result.clear();</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> n <span class="sh_symbol">&gt;</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">&gt;=</span> N<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> <span class="sh_symbol">(</span>ll<span class="sh_symbol">)</span>p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;=</span> n <span class="sh_symbol">&amp;&amp;</span> n <span class="sh_symbol">%</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">);</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">%</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">return</span> <span class="sh_function">push</span><span class="sh_symbol">(</span>n<span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> i <span class="sh_symbol">=</span> c<span class="sh_symbol">[</span>n<span class="sh_symbol">];</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_symbol">!(</span>n <span class="sh_symbol">%</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]);</span> n <span class="sh_symbol">/=</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">);</span> <span class="sh_function">push</span><span class="sh_symbol">(</span>p<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> j<span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
