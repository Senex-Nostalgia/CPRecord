<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>多边形操作</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_comment">// Relation of 3 points. (2 inside, 1 outside, 0 not collinear)</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">collinear</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>v<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>P<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_type">double</span> p <span class="sh_symbol">=</span> <span class="sh_function">cross</span><span class="sh_symbol">(</span>P<span class="sh_symbol">,</span> u<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">?</span> <span class="sh_number">1</span> <span class="sh_symbol">+</span> <span class="sh_function">le</span><span class="sh_symbol">(</span><span class="sh_function">dot</span><span class="sh_symbol">(</span>P<span class="sh_symbol">,</span> u<span class="sh_symbol">,</span> v<span class="sh_symbol">),</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// Perimeter of a polygon</span>
<span class="sh_type">double</span> <span class="sh_function">perimeter</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>poly<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> ret <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>poly<span class="sh_symbol">[</span>n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_symbol">*</span>poly<span class="sh_symbol">).</span><span class="sh_function">norm</span><span class="sh_symbol">();</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> ret <span class="sh_symbol">+=</span> <span class="sh_symbol">(</span>poly<span class="sh_symbol">[</span>i <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">-</span> poly<span class="sh_symbol">[</span>i<span class="sh_symbol">]).</span><span class="sh_function">norm</span><span class="sh_symbol">();</span>
	<span class="sh_keyword">return</span> ret<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// Directed area of a polygon (positive if CCW)</span>
<span class="sh_type">double</span> <span class="sh_function">area</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>poly<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> ret <span class="sh_symbol">=</span> poly<span class="sh_symbol">[</span>n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">^</span> <span class="sh_symbol">*</span>poly<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> ret <span class="sh_symbol">+=</span> poly<span class="sh_symbol">[</span>i <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">^</span> poly<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
	<span class="sh_keyword">return</span> ret <span class="sh_symbol">*</span> <span class="sh_number">0.5</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// Point in polygon (2 on boundary, 1 inside, 0 outside)</span>
<span class="sh_type">int</span> <span class="sh_function">contain</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>poly<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>P<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> in <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>r <span class="sh_symbol">=</span> poly <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">),</span> <span class="sh_symbol">*</span>u<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>v<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> r <span class="sh_symbol">=</span> poly<span class="sh_symbol">,</span> <span class="sh_symbol">++</span>poly<span class="sh_symbol">,</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">collinear</span><span class="sh_symbol">(*</span>r<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>poly<span class="sh_symbol">,</span> P<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_number">2</span><span class="sh_symbol">;</span>
		<span class="sh_function">gt</span><span class="sh_symbol">(</span>r<span class="sh_symbol">-&gt;</span>y<span class="sh_symbol">,</span> poly<span class="sh_symbol">-&gt;</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">?</span> <span class="sh_symbol">(</span>u <span class="sh_symbol">=</span> poly<span class="sh_symbol">,</span> v <span class="sh_symbol">=</span> r<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span>u <span class="sh_symbol">=</span> r<span class="sh_symbol">,</span> v <span class="sh_symbol">=</span> poly<span class="sh_symbol">);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">ge</span><span class="sh_symbol">(</span>P<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> v<span class="sh_symbol">-&gt;</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>P<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> u<span class="sh_symbol">-&gt;</span>y<span class="sh_symbol">))</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span>
		in <span class="sh_symbol">^=</span> <span class="sh_function">gt</span><span class="sh_symbol">(</span><span class="sh_function">cross</span><span class="sh_symbol">(</span>P<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>u<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>v<span class="sh_symbol">),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> in<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
