<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>Hash Map</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">class</span><span class="sh_normal"> </span><span class="sh_classname">hash_map</span><span class="sh_cbracket">{</span>
<span class="sh_keyword">public</span><span class="sh_symbol">:</span>
	<span class="sh_keyword">static</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> HASH_MAX <span class="sh_symbol">=</span> <span class="sh_number">0xffffff</span><span class="sh_symbol">,</span> N <span class="sh_symbol">=</span> <span class="sh_number">8000000</span><span class="sh_symbol">;</span>
	<span class="sh_type">int</span> cnt<span class="sh_symbol">,</span> first<span class="sh_symbol">[</span>HASH_MAX <span class="sh_symbol">+</span> <span class="sh_number">2</span><span class="sh_symbol">],</span> next<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span> <span class="sh_usertype">data</span><span class="sh_normal"> </span>z<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">getHash</span><span class="sh_symbol">(</span><span class="sh_type">int</span> key<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">(</span>key <span class="sh_symbol">^</span> key <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">3</span> <span class="sh_symbol">^</span> key <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">2</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;</span> HASH_MAX<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">clear</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span><span class="sh_symbol">(;</span> cnt <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_symbol">--</span>cnt<span class="sh_symbol">)</span> first<span class="sh_symbol">[</span>z<span class="sh_symbol">[</span>cnt<span class="sh_symbol">].</span>hash<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

	data <span class="sh_symbol">*</span> <span class="sh_function">find</span><span class="sh_symbol">(</span><span class="sh_type">int</span> key<span class="sh_symbol">,</span> <span class="sh_type">bool</span> inserted<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> x <span class="sh_symbol">=</span> <span class="sh_function">getHash</span><span class="sh_symbol">(</span>key<span class="sh_symbol">),</span> i<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span>z<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>key <span class="sh_symbol">==</span> key<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> z <span class="sh_symbol">+</span> i<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(!</span>inserted<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> NULL<span class="sh_symbol">;</span>
		z<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">data</span><span class="sh_symbol">(</span>key<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> x<span class="sh_symbol">);</span> next<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
		<span class="sh_keyword">return</span> z <span class="sh_symbol">+</span> cnt<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
