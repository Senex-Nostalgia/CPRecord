<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>线段树 (封装)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">ST</span><span class="sh_cbracket">{</span>
<span class="sh_preproc">	#define</span> segc <span class="sh_type">int</span> M <span class="sh_symbol">=</span> L <span class="sh_symbol">+</span> R <span class="sh_symbol">-</span> <span class="sh_number">1</span> <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> lc <span class="sh_symbol">=</span> id <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> rc <span class="sh_symbol">=</span> lc <span class="sh_symbol">|</span> <span class="sh_number">1</span>
	<span class="sh_type">int</span> sz<span class="sh_symbol">;</span>
	<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">node</span> <span class="sh_cbracket">{</span><span class="sh_type">int</span> v<span class="sh_symbol">,</span> f<span class="sh_symbol">;</span> <span class="sh_type">bool</span> zero<span class="sh_symbol">;</span><span class="sh_cbracket">}</span> <span class="sh_symbol">*</span>x<span class="sh_symbol">;</span>
	<span class="sh_function">ST</span> <span class="sh_symbol">():</span> <span class="sh_function">sz</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">=</span> NULL<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_symbol">~</span><span class="sh_function">ST</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_keyword">if</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">resize</span><span class="sh_symbol">(</span><span class="sh_type">int</span> size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>sz <span class="sh_symbol">=</span> size<span class="sh_symbol">;</span> <span class="sh_type">int</span> sz0 <span class="sh_symbol">=</span> sz <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">3</span><span class="sh_symbol">;</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">);</span>
		x <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> node<span class="sh_symbol">[</span>sz0<span class="sh_symbol">];</span> <span class="sh_function">memset</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> sz0 <span class="sh_symbol">*</span> <span class="sh_keyword">sizeof</span><span class="sh_symbol">(</span>node<span class="sh_symbol">));</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> h<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> sz<span class="sh_symbol">,</span> h<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">int</span> <span class="sh_function">range</span><span class="sh_symbol">(</span><span class="sh_type">int</span> l<span class="sh_symbol">,</span> <span class="sh_type">int</span> r<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">query</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> sz<span class="sh_symbol">,</span> l<span class="sh_symbol">,</span> r<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">,</span> <span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">,</span> <span class="sh_type">int</span> h<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>L <span class="sh_symbol">==</span> R<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_type">void</span><span class="sh_symbol">(</span>x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">+=</span> v<span class="sh_symbol">);</span>
		segc<span class="sh_symbol">;</span> h <span class="sh_symbol">&lt;=</span> M <span class="sh_symbol">?</span> <span class="sh_function">add</span><span class="sh_symbol">(</span>lc<span class="sh_symbol">,</span> L<span class="sh_symbol">,</span> M<span class="sh_symbol">,</span> h<span class="sh_symbol">,</span> v<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">add</span><span class="sh_symbol">(</span>rc<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> h<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span>
		x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">=</span> x<span class="sh_symbol">[</span>lc<span class="sh_symbol">].</span>v <span class="sh_symbol">+</span> x<span class="sh_symbol">[</span>rc<span class="sh_symbol">].</span>v<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">int</span> <span class="sh_function">query</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">,</span> <span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">,</span> <span class="sh_type">int</span> ql<span class="sh_symbol">,</span> <span class="sh_type">int</span> qr<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>ql <span class="sh_symbol">&lt;=</span> L <span class="sh_symbol">&amp;&amp;</span> R <span class="sh_symbol">&lt;=</span> qr<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v<span class="sh_symbol">;</span>
		segc<span class="sh_symbol">,</span> s <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>ql <span class="sh_symbol">&lt;=</span> M<span class="sh_symbol">)</span> s <span class="sh_symbol">+=</span> <span class="sh_function">query</span><span class="sh_symbol">(</span>lc<span class="sh_symbol">,</span> L<span class="sh_symbol">,</span> M<span class="sh_symbol">,</span> ql<span class="sh_symbol">,</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>qr<span class="sh_symbol">,</span> M<span class="sh_symbol">));</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>qr <span class="sh_symbol">&gt;</span> M<span class="sh_symbol">)</span> s <span class="sh_symbol">+=</span> <span class="sh_function">query</span><span class="sh_symbol">(</span>rc<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> <span class="sh_function">max</span><span class="sh_symbol">(</span>ql<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">),</span> qr<span class="sh_symbol">);</span>
		<span class="sh_keyword">return</span> s<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
