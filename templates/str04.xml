<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>Aho-Corasick 自动机</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">void</span> <span class="sh_function">build</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> h<span class="sh_symbol">,</span> ta <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> t<span class="sh_symbol">,</span> id<span class="sh_symbol">;</span>
	que<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	f<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>h <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> h <span class="sh_symbol">&lt;</span> ta<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>h<span class="sh_symbol">)</span>
		<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">],</span> id <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> id <span class="sh_symbol">&lt;</span> <span class="sh_number">26</span><span class="sh_symbol">;</span> <span class="sh_symbol">++</span>id<span class="sh_symbol">)</span><span class="sh_cbracket">{</span> <span class="sh_comment">// 26 is the size of char-set</span>
			t <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>f<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> d<span class="sh_symbol">[</span>f<span class="sh_symbol">[</span>i<span class="sh_symbol">]][</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">:</span> <span class="sh_number">1</span><span class="sh_symbol">);</span> <span class="sh_comment">// 1 or 0 depend on the root of trie</span>
			<span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>u <span class="sh_symbol">=</span> d<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>id<span class="sh_symbol">];</span>
			<span class="sh_keyword">if</span><span class="sh_symbol">(!</span>u<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>u <span class="sh_symbol">=</span> t<span class="sh_symbol">;</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
			f<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> t<span class="sh_symbol">;</span> val<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">|=</span> val<span class="sh_symbol">[</span>t<span class="sh_symbol">];</span> que<span class="sh_symbol">[</span>ta<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> u<span class="sh_symbol">;</span>
			la<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>v<span class="sh_symbol">[</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> t <span class="sh_symbol">:</span> la<span class="sh_symbol">[</span>t<span class="sh_symbol">]);</span>
		<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
