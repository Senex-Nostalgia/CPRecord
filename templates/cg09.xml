<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>三维计算几何基础</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_function">triple</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> z<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">*</span> <span class="sh_symbol">((</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">^</span> <span class="sh_symbol">(</span>z<span class="sh_symbol">)))</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">vec3</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> z<span class="sh_symbol">;</span>
	<span class="sh_function">vec3</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> x0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> y0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> z0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">x</span><span class="sh_symbol">(</span>x0<span class="sh_symbol">),</span> <span class="sh_function">y</span><span class="sh_symbol">(</span>y0<span class="sh_symbol">),</span> <span class="sh_function">z</span><span class="sh_symbol">(</span>z0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	vec3 <span class="sh_symbol">*</span> <span class="sh_function">read</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_function">scanf</span><span class="sh_symbol">(</span><span class="sh_string">"%lf%lf%lf"</span><span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>y<span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>z<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> <span class="sh_keyword">this</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">-</span> <span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(-</span>x<span class="sh_symbol">,</span> <span class="sh_symbol">-</span>y<span class="sh_symbol">,</span> <span class="sh_symbol">-</span>z<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(</span>x <span class="sh_symbol">+</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> y <span class="sh_symbol">+</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> z <span class="sh_symbol">+</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(</span>x <span class="sh_symbol">-</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> y <span class="sh_symbol">-</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> z <span class="sh_symbol">-</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(</span>x <span class="sh_symbol">*</span> k<span class="sh_symbol">,</span> y <span class="sh_symbol">*</span> k<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">/</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_number">1.0</span> <span class="sh_symbol">/</span> k<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>y <span class="sh_symbol">+</span> z <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">^</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(</span>y <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>z <span class="sh_symbol">-</span> z <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> z <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>x <span class="sh_symbol">-</span> x <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">,</span> x <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>y <span class="sh_symbol">-</span> y <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">norm2</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">*</span> x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> y <span class="sh_symbol">+</span> z <span class="sh_symbol">*</span> z<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">norm</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">sqrt</span><span class="sh_symbol">(</span>x <span class="sh_symbol">*</span> x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> y <span class="sh_symbol">+</span> z <span class="sh_symbol">*</span> z<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span><span class="sh_function">lt</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>z<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">));</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">==</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>z<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>z<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_comment">// Positive if Right-hand rule</span>
<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">volume</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>A<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>B<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>C<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>D<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">triple</span><span class="sh_symbol">(</span>B <span class="sh_symbol">-</span> A<span class="sh_symbol">,</span> C <span class="sh_symbol">-</span> A<span class="sh_symbol">,</span> D <span class="sh_symbol">-</span> A<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">line3</span> <span class="sh_cbracket">{</span>
	<span class="sh_usertype">vec3</span><span class="sh_normal"> </span>P<span class="sh_symbol">,</span> t<span class="sh_symbol">;</span>
	<span class="sh_function">line3</span> <span class="sh_symbol">(</span>vec3 _P <span class="sh_symbol">=</span> <span class="sh_function">vec3</span><span class="sh_symbol">(),</span> vec3 _t <span class="sh_symbol">=</span> <span class="sh_function">vec3</span><span class="sh_symbol">())</span> <span class="sh_symbol">:</span> <span class="sh_function">P</span><span class="sh_symbol">(</span>_P<span class="sh_symbol">),</span> <span class="sh_function">t</span><span class="sh_symbol">(</span>_t<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">dis2</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>P<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line3</span><span class="sh_normal"> </span>l<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">((</span>P <span class="sh_symbol">-</span> l<span class="sh_symbol">.</span>P<span class="sh_symbol">)</span> <span class="sh_symbol">^</span> l<span class="sh_symbol">.</span>t<span class="sh_symbol">).</span><span class="sh_function">norm2</span><span class="sh_symbol">()</span> <span class="sh_symbol">/</span> l<span class="sh_symbol">.</span>t<span class="sh_symbol">.</span><span class="sh_function">norm2</span><span class="sh_symbol">();</span><span class="sh_cbracket">}</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">plane</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> A<span class="sh_symbol">,</span> B<span class="sh_symbol">,</span> C<span class="sh_symbol">,</span> D<span class="sh_symbol">;</span> <span class="sh_comment">// Ax + By + Cz + D = 0</span>
	<span class="sh_function">plane</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> A0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> B0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> C0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> D0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">A</span><span class="sh_symbol">(</span>A0<span class="sh_symbol">),</span> <span class="sh_function">B</span><span class="sh_symbol">(</span>B0<span class="sh_symbol">),</span> <span class="sh_function">C</span><span class="sh_symbol">(</span>C0<span class="sh_symbol">),</span> <span class="sh_function">D</span><span class="sh_symbol">(</span>D0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	<span class="sh_function">plane</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>v<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>w<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_usertype">vec3</span><span class="sh_normal"> </span>t <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>v <span class="sh_symbol">-</span> u<span class="sh_symbol">)</span> <span class="sh_symbol">^</span> <span class="sh_symbol">(</span>w <span class="sh_symbol">-</span> u<span class="sh_symbol">);</span> A <span class="sh_symbol">=</span> t<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> B <span class="sh_symbol">=</span> t<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> C <span class="sh_symbol">=</span> t<span class="sh_symbol">.</span>z<span class="sh_symbol">,</span> D <span class="sh_symbol">=</span> <span class="sh_symbol">-</span><span class="sh_function">triple</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> w<span class="sh_symbol">);</span><span class="sh_cbracket">}</span> <span class="sh_comment">// &gt; 0 if it follows Right-hand rule</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">(</span>A<span class="sh_symbol">,</span> B<span class="sh_symbol">,</span> C<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">norm2</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> A <span class="sh_symbol">*</span> A <span class="sh_symbol">+</span> B <span class="sh_symbol">*</span> B <span class="sh_symbol">+</span> C <span class="sh_symbol">*</span> C<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">()</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>P<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> A <span class="sh_symbol">*</span> P<span class="sh_symbol">.</span>x <span class="sh_symbol">+</span> B <span class="sh_symbol">*</span> P<span class="sh_symbol">.</span>y <span class="sh_symbol">+</span> C <span class="sh_symbol">*</span> P<span class="sh_symbol">.</span>z <span class="sh_symbol">+</span> D<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">dis2</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span>P<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">plane</span><span class="sh_normal"> </span>F<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">F</span><span class="sh_symbol">(</span>P<span class="sh_symbol">)</span> <span class="sh_symbol">*</span> <span class="sh_function">F</span><span class="sh_symbol">(</span>P<span class="sh_symbol">)</span> <span class="sh_symbol">/</span> F<span class="sh_symbol">.</span><span class="sh_function">norm2</span><span class="sh_symbol">();</span><span class="sh_cbracket">}</span></code></pre>
</template>
