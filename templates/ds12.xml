<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>Chtholly 树 (ODT) / set 维护连续段</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">namespace</span> CTree <span class="sh_cbracket">{</span>
	<span class="sh_usertype">map</span><span class="sh_normal"> </span>C<span class="sh_symbol">;</span>

	map<span class="sh_symbol">::</span><span class="sh_usertype">iterator</span><span class="sh_normal"> </span><span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_type">int</span> pos<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		map<span class="sh_symbol">::</span><span class="sh_usertype">iterator</span><span class="sh_normal"> </span>it <span class="sh_symbol">=</span> C<span class="sh_symbol">.</span><span class="sh_function">lower_bound</span><span class="sh_symbol">(</span>pos<span class="sh_symbol">),</span> jt <span class="sh_symbol">=</span> it<span class="sh_symbol">;</span>
		<span class="sh_keyword">return</span> it<span class="sh_symbol">-&gt;</span>first <span class="sh_symbol">==</span> pos <span class="sh_symbol">?</span> it <span class="sh_symbol">:</span> C<span class="sh_symbol">.</span><span class="sh_function">emplace_hint</span><span class="sh_symbol">(</span>it<span class="sh_symbol">,</span> pos<span class="sh_symbol">,</span> <span class="sh_symbol">(--</span>jt<span class="sh_symbol">)-&gt;</span>second<span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">modify</span><span class="sh_symbol">(</span><span class="sh_type">int</span> l<span class="sh_symbol">,</span> <span class="sh_type">int</span> r<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		map<span class="sh_symbol">::</span><span class="sh_usertype">iterator</span><span class="sh_normal"> </span>it <span class="sh_symbol">=</span> <span class="sh_function">split</span><span class="sh_symbol">(</span>l<span class="sh_symbol">),</span> jt <span class="sh_symbol">=</span> <span class="sh_function">split</span><span class="sh_symbol">(</span>r<span class="sh_symbol">),</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> it<span class="sh_symbol">;</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> j<span class="sh_symbol">++)</span> <span class="sh_symbol">!=</span> jt<span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_comment">// do something on [i, j]</span>
		C<span class="sh_symbol">.</span><span class="sh_function">erase</span><span class="sh_symbol">(</span>it<span class="sh_symbol">,</span> jt<span class="sh_symbol">),</span> C<span class="sh_symbol">.</span><span class="sh_function">emplace</span><span class="sh_symbol">(</span>l<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span> <span class="sh_comment">// do something</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
