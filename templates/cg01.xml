<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>二维向量/点、计算几何基础</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">const</span> <span class="sh_type">double</span> eps <span class="sh_symbol">=</span> <span class="sh_number">1e-8</span><span class="sh_symbol">;</span>

<span class="sh_preproc">#define</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> eps<span class="sh_symbol">)</span>
<span class="sh_preproc">#define</span> <span class="sh_function">gt</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&gt;</span> <span class="sh_symbol">(</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> eps<span class="sh_symbol">)</span>
<span class="sh_preproc">#define</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&lt;=</span> <span class="sh_symbol">(</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> eps<span class="sh_symbol">)</span>
<span class="sh_preproc">#define</span> <span class="sh_function">ge</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&gt;=</span> <span class="sh_symbol">(</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> eps<span class="sh_symbol">)</span>
<span class="sh_preproc">#define</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">(</span><span class="sh_function">le</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">ge</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">))</span>
<span class="sh_preproc">#define</span> <span class="sh_function">dot</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> z<span class="sh_symbol">)</span> <span class="sh_symbol">(((</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_symbol">*</span> <span class="sh_symbol">((</span>z<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">)))</span>
<span class="sh_preproc">#define</span> <span class="sh_function">cross</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> z<span class="sh_symbol">)</span> <span class="sh_symbol">(((</span>y<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_symbol">^</span> <span class="sh_symbol">((</span>z<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span>x<span class="sh_symbol">)))</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">vec2</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">double</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
	<span class="sh_function">vec2</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> x0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">,</span> <span class="sh_type">double</span> y0 <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">x</span><span class="sh_symbol">(</span>x0<span class="sh_symbol">),</span> <span class="sh_function">y</span><span class="sh_symbol">(</span>y0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	vec2 <span class="sh_symbol">*</span> <span class="sh_function">read</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_function">scanf</span><span class="sh_symbol">(</span><span class="sh_string">"%lf%lf"</span><span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>y<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> <span class="sh_keyword">this</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">-</span> <span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(-</span>x<span class="sh_symbol">,</span> <span class="sh_symbol">-</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>x <span class="sh_symbol">+</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> y <span class="sh_symbol">+</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>x <span class="sh_symbol">-</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> y <span class="sh_symbol">-</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>x <span class="sh_symbol">*</span> k<span class="sh_symbol">,</span> y <span class="sh_symbol">*</span> k<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_keyword">operator</span> <span class="sh_symbol">/</span> <span class="sh_symbol">(</span><span class="sh_type">double</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_number">1.0</span> <span class="sh_symbol">/</span> k<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">*</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">^</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>y <span class="sh_symbol">-</span> y <span class="sh_symbol">*</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">norm2</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">*</span> x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">double</span> <span class="sh_function">norm</span><span class="sh_symbol">()</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">sqrt</span><span class="sh_symbol">(</span>x <span class="sh_symbol">*</span> x <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">==</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">eq</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> B<span class="sh_symbol">.</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>B<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">^</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>B<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">?</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>B<span class="sh_symbol">.</span>y<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">gt</span><span class="sh_symbol">(*</span><span class="sh_keyword">this</span> <span class="sh_symbol">^</span> B<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">ge</span><span class="sh_symbol">(*</span><span class="sh_keyword">this</span> <span class="sh_symbol">^</span> B<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">ge</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>B<span class="sh_symbol">.</span>x<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_function">trans</span><span class="sh_symbol">(</span><span class="sh_type">double</span> a11<span class="sh_symbol">,</span> <span class="sh_type">double</span> a12<span class="sh_symbol">,</span> <span class="sh_type">double</span> a21<span class="sh_symbol">,</span> <span class="sh_type">double</span> a22<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec2</span><span class="sh_symbol">(</span>x <span class="sh_symbol">*</span> a11 <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> a12<span class="sh_symbol">,</span> x <span class="sh_symbol">*</span> a21 <span class="sh_symbol">+</span> y <span class="sh_symbol">*</span> a22<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_comment">/*</span>
<span class="sh_comment">operator * : Dot product</span>
<span class="sh_comment">operator ^ : Cross product</span>
<span class="sh_comment">norm2() : |v|^2 = v.v</span>
<span class="sh_comment">norm() : |v| = sqrt(v.v)</span>
<span class="sh_comment">operator &lt; : Two-key compare</span>
<span class="sh_comment">operator &lt;&lt; : Polar angle compare</span>
<span class="sh_comment">trans : Transition with a 2x2 matrix</span>
<span class="sh_comment">*/</span></code></pre>
</template>
