<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>最近公共祖先 (LCA) 的倍增算法 (树上倍增的基本模板)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">void</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">];</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> P<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">][</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">]];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">((</span>y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_symbol">!=</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span>
			p<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>y<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">jump_until</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> d<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> S <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> d<span class="sh_symbol">;</span> S<span class="sh_symbol">;</span> S <span class="sh_symbol">&amp;=</span> S <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> x <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span><span class="sh_function">ctz</span><span class="sh_symbol">(</span>S<span class="sh_symbol">)][</span>x<span class="sh_symbol">];</span>
	<span class="sh_keyword">return</span> x<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">])</span> std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">);</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">=</span> <span class="sh_function">jump_until</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]),</span> x <span class="sh_symbol">==</span> y<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> LN <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&gt;=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_symbol">--</span>i<span class="sh_symbol">)</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">!=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>y<span class="sh_symbol">])</span>
			x <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">],</span> y <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>y<span class="sh_symbol">];</span>
	<span class="sh_keyword">return</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
