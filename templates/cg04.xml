<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>平面凸包 (Graham Scan)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> <span class="sh_function">graham</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>p<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>dest<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">;</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>ret <span class="sh_symbol">=</span> dest<span class="sh_symbol">;</span>
	std<span class="sh_symbol">::</span><span class="sh_function">iter_swap</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> std<span class="sh_symbol">::</span><span class="sh_function">min_element</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> p <span class="sh_symbol">+</span> n<span class="sh_symbol">));</span>
	std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>p <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> p <span class="sh_symbol">+</span> n<span class="sh_symbol">,</span> <span class="sh_symbol">[</span>p<span class="sh_symbol">]</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>A<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>B<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_type">double</span> r <span class="sh_symbol">=</span> <span class="sh_function">cross</span><span class="sh_symbol">(*</span>p<span class="sh_symbol">,</span> A<span class="sh_symbol">,</span> B<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> <span class="sh_function">gt</span><span class="sh_symbol">(</span>r<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_symbol">(</span><span class="sh_function">ge</span><span class="sh_symbol">(</span>r<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">((</span>A <span class="sh_symbol">-</span> <span class="sh_symbol">*</span>p<span class="sh_symbol">).</span><span class="sh_function">norm2</span><span class="sh_symbol">(),</span> <span class="sh_symbol">(</span>B <span class="sh_symbol">-</span> <span class="sh_symbol">*</span>p<span class="sh_symbol">).</span><span class="sh_function">norm2</span><span class="sh_symbol">()));</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> <span class="sh_number">2</span> <span class="sh_symbol">&amp;&amp;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_symbol">*</span>ret<span class="sh_symbol">++</span> <span class="sh_symbol">=</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">*</span>ret<span class="sh_symbol">++</span> <span class="sh_symbol">=</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">++])</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> ret <span class="sh_symbol">!=</span> dest <span class="sh_symbol">+</span> <span class="sh_number">1</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">ge</span><span class="sh_symbol">(</span><span class="sh_function">cross</span><span class="sh_symbol">(</span>ret<span class="sh_symbol">[-</span><span class="sh_number">2</span><span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> ret<span class="sh_symbol">[-</span><span class="sh_number">1</span><span class="sh_symbol">]),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span> <span class="sh_symbol">--</span>ret<span class="sh_symbol">);</span>
	<span class="sh_keyword">return</span> <span class="sh_symbol">*</span>ret <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>p<span class="sh_symbol">,</span> ret <span class="sh_symbol">-</span> dest<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
