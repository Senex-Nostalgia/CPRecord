<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>一般图最大匹配 (带花树算法)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> unknown <span class="sh_symbol">-</span><span class="sh_number">1</span>
<span class="sh_preproc">#define</span> boy <span class="sh_number">0</span>
<span class="sh_preproc">#define</span> girl <span class="sh_number">1</span>

<span class="sh_type">int</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(++</span>hash_cnt<span class="sh_symbol">;</span> x<span class="sh_symbol">;</span> y <span class="sh_symbol">?</span> <span class="sh_function">swap</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)</span><span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		x <span class="sh_symbol">=</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>hash<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> hash_cnt<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">;</span> <span class="sh_comment">// visited</span>
		hash<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> hash_cnt<span class="sh_symbol">;</span>
		x <span class="sh_symbol">=</span> prev<span class="sh_symbol">[</span>match<span class="sh_symbol">[</span>x<span class="sh_symbol">]];</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> <span class="sh_number">0x131a371</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">blossom</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">,</span> <span class="sh_type">int</span> root<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>t<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// vertices in blossoms are all boys !</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> z<span class="sh_symbol">;</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">!=</span> root<span class="sh_symbol">;</span> y <span class="sh_symbol">=</span> z<span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> prev<span class="sh_symbol">[</span>y<span class="sh_symbol">])</span> <span class="sh_cbracket">{</span>
		prev<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span> z <span class="sh_symbol">=</span> match<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>col<span class="sh_symbol">[</span>z<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> girl<span class="sh_symbol">)</span> que<span class="sh_symbol">[</span>t<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> z<span class="sh_symbol">,</span> col<span class="sh_symbol">[</span>z<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> boy<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">ancestor</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> x<span class="sh_symbol">)</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> root<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">ancestor</span><span class="sh_symbol">(</span>z<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> z<span class="sh_symbol">)</span> p<span class="sh_symbol">[</span>z<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> root<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">bool</span> <span class="sh_function">bfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> st<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> h<span class="sh_symbol">,</span> t <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> b<span class="sh_symbol">,</span> g<span class="sh_symbol">;</span>
	que<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> st<span class="sh_symbol">;</span> col<span class="sh_symbol">[</span>st<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> boy<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>h <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> h <span class="sh_symbol">&lt;</span> t<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>h<span class="sh_symbol">)</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x <span class="sh_symbol">=</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">]];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>col<span class="sh_symbol">[</span>y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">==</span> unknown<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// common step</span>
				prev<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span> col<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> girl<span class="sh_symbol">;</span>
				<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>match<span class="sh_symbol">[</span>y<span class="sh_symbol">])</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// augment (change mates) !!!</span>
					<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>g <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span> g<span class="sh_symbol">;</span> <span class="sh_function">swap</span><span class="sh_symbol">(</span>match<span class="sh_symbol">[</span>b<span class="sh_symbol">],</span> g<span class="sh_symbol">))</span>
						match<span class="sh_symbol">[</span>g<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> b <span class="sh_symbol">=</span> prev<span class="sh_symbol">[</span>g<span class="sh_symbol">];</span>
					<span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
				<span class="sh_cbracket">}</span>
				col<span class="sh_symbol">[</span>que<span class="sh_symbol">[</span>t<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> match<span class="sh_symbol">[</span>y<span class="sh_symbol">]]</span> <span class="sh_symbol">=</span> boy<span class="sh_symbol">;</span>
			<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_keyword">if</span><span class="sh_symbol">(</span>col<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> boy <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">!=</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>y<span class="sh_symbol">))</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// flower !!!</span>
				b <span class="sh_symbol">=</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">);</span> <span class="sh_function">blossom</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> b<span class="sh_symbol">,</span> t<span class="sh_symbol">);</span> <span class="sh_function">blossom</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> b<span class="sh_symbol">,</span> t<span class="sh_symbol">);</span>
			<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_comment">// main process</span>
<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> V<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>v <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> v <span class="sh_symbol">&lt;=</span> V<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>v<span class="sh_symbol">)</span> col<span class="sh_symbol">[</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> unknown<span class="sh_symbol">,</span> p<span class="sh_symbol">[</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> v<span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>match<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">bfs</span><span class="sh_symbol">(</span>i<span class="sh_symbol">))</span> <span class="sh_symbol">++</span>ans<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
