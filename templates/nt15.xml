<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>Pollard-Rho 素因数分解</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_usertype">ll</span><span class="sh_normal"> </span><span class="sh_function">Pollard_Rho</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>n<span class="sh_symbol">,</span> <span class="sh_type">int</span> c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_usertype">ll</span><span class="sh_normal"> </span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> k <span class="sh_symbol">=</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> <span class="sh_function">rand</span><span class="sh_symbol">()</span> <span class="sh_symbol">%</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> y <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> p<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> k <span class="sh_symbol">&lt;=</span> <span class="sh_number">131072</span><span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		x <span class="sh_symbol">=</span> <span class="sh_symbol">(</span><span class="sh_function">MulMod</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> n<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> c<span class="sh_symbol">)</span> <span class="sh_symbol">%</span> n<span class="sh_symbol">;</span>
		p <span class="sh_symbol">=</span> gcd<span class="sh_symbol">&lt;</span>ll<span class="sh_symbol">&gt;((</span>ull<span class="sh_symbol">)(</span>y <span class="sh_symbol">-</span> x <span class="sh_symbol">+</span> n<span class="sh_symbol">)</span> <span class="sh_symbol">%</span> n<span class="sh_symbol">,</span> n<span class="sh_symbol">);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>p <span class="sh_symbol">!=</span> <span class="sh_number">1</span> <span class="sh_symbol">&amp;&amp;</span> p <span class="sh_symbol">!=</span> n<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> p<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(++</span>i <span class="sh_symbol">==</span> k<span class="sh_symbol">)</span> y <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> k <span class="sh_symbol">&lt;&lt;=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">push</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>prime<span class="sh_symbol">,</span> <span class="sh_type">int</span> alpha<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	map<span class="sh_symbol">::</span><span class="sh_usertype">iterator</span><span class="sh_normal"> </span>it <span class="sh_symbol">=</span> result<span class="sh_symbol">.</span><span class="sh_function">find</span><span class="sh_symbol">(</span>prime<span class="sh_symbol">);</span>
	it <span class="sh_symbol">==</span> result<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">()</span> <span class="sh_symbol">?</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)</span>result<span class="sh_symbol">.</span><span class="sh_function">insert</span><span class="sh_symbol">(</span><span class="sh_function">pr</span><span class="sh_symbol">(</span>prime<span class="sh_symbol">,</span> alpha<span class="sh_symbol">))</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)(</span>it<span class="sh_symbol">-&gt;</span>second <span class="sh_symbol">+=</span> alpha<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">factor</span><span class="sh_symbol">(</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>n<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k<span class="sh_symbol">;</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>p<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> n <span class="sh_symbol">!=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> <span class="sh_symbol">)</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">&gt;=</span> MAX<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">Miller_Rabin</span><span class="sh_symbol">(</span>n<span class="sh_symbol">))</span> <span class="sh_cbracket">{</span><span class="sh_function">push</span><span class="sh_symbol">(</span>n<span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>k <span class="sh_symbol">=</span> <span class="sh_number">97</span><span class="sh_symbol">;</span> <span class="sh_symbol">!(</span>p <span class="sh_symbol">=</span> <span class="sh_function">Pollard_Rho</span><span class="sh_symbol">(</span>n<span class="sh_symbol">,</span> k<span class="sh_symbol">));</span> <span class="sh_symbol">--</span>k<span class="sh_symbol">);</span>
			<span class="sh_function">factor</span><span class="sh_symbol">(</span>p<span class="sh_symbol">);</span> n <span class="sh_symbol">/=</span> p<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
			i <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>c<span class="sh_symbol">[</span>n<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> c<span class="sh_symbol">[</span>n<span class="sh_symbol">]</span> <span class="sh_symbol">:</span> n<span class="sh_symbol">);</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_symbol">!(</span>n <span class="sh_symbol">%</span> i<span class="sh_symbol">);</span> n <span class="sh_symbol">/=</span> i<span class="sh_symbol">,</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">);</span>
			<span class="sh_function">push</span><span class="sh_symbol">(</span>i<span class="sh_symbol">,</span> j<span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
