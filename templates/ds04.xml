<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>树状数组 (封装，可清空)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">BIT</span> <span class="sh_cbracket">{</span>
	<span class="sh_preproc">#define</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">&amp;</span> <span class="sh_symbol">-</span>x<span class="sh_symbol">)</span>
	<span class="sh_type">int</span> n<span class="sh_symbol">,</span> ti<span class="sh_symbol">,</span> tag<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>x<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
	<span class="sh_function">BIT</span> <span class="sh_symbol">()</span> <span class="sh_symbol">:</span> <span class="sh_function">ti</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">resize</span><span class="sh_symbol">(</span><span class="sh_type">int</span> size<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>n <span class="sh_symbol">=</span> size<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">clear</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_symbol">++</span>ti<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> ll <span class="sh_symbol">&amp;</span> <span class="sh_function">recover</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> tag<span class="sh_symbol">[</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> ti <span class="sh_symbol">?</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span>tag<span class="sh_symbol">[</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> ti<span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_usertype">ll</span><span class="sh_normal"> </span><span class="sh_function">sum</span><span class="sh_symbol">(</span><span class="sh_type">int</span> h<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_usertype">ll</span><span class="sh_normal"> </span>s <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&gt;</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> h <span class="sh_symbol">-=</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>h<span class="sh_symbol">))</span> s <span class="sh_symbol">+=</span> <span class="sh_function">recover</span><span class="sh_symbol">(</span>h<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> s<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> h<span class="sh_symbol">,</span> <span class="sh_usertype">ll</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&lt;=</span> n<span class="sh_symbol">;</span> h <span class="sh_symbol">+=</span> <span class="sh_function">lowbit</span><span class="sh_symbol">(</span>h<span class="sh_symbol">))</span> <span class="sh_function">recover</span><span class="sh_symbol">(</span>h<span class="sh_symbol">)</span> <span class="sh_symbol">+=</span> v<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
