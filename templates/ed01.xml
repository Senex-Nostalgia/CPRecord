<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>IO 优化</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_usertype">ID</span><span class="sh_normal"> </span><span class="sh_function">isdigit</span><span class="sh_symbol">(</span>c <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>next<span class="sh_symbol">++)</span>
<span class="sh_preproc">#define</span> <span class="sh_usertype">IS</span><span class="sh_normal"> </span><span class="sh_function">isspace</span><span class="sh_symbol">(</span>c <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>next<span class="sh_symbol">++)</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">Istream</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">char</span> <span class="sh_symbol">*</span>next<span class="sh_symbol">,</span> buf<span class="sh_symbol">[</span><span class="sh_number">20030731</span><span class="sh_symbol">];</span>
	Istream <span class="sh_symbol">&amp;</span> <span class="sh_function">init</span><span class="sh_symbol">(</span><span class="sh_usertype">FILE</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>f <span class="sh_symbol">=</span> stdin<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">fread</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> buf<span class="sh_symbol">,</span> f<span class="sh_symbol">);</span> next <span class="sh_symbol">=</span> buf<span class="sh_symbol">;</span> <span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	Istream <span class="sh_symbol">&amp;</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&gt;&gt;</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> c<span class="sh_symbol">;</span> x <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> <span class="sh_symbol">!</span>ID<span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(!~</span>c<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">=</span> c <span class="sh_symbol">&amp;</span> <span class="sh_number">15</span><span class="sh_symbol">;</span> ID<span class="sh_symbol">;</span> x <span class="sh_symbol">=</span> x <span class="sh_symbol">*</span> <span class="sh_number">10</span> <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>c <span class="sh_symbol">&amp;</span> <span class="sh_number">15</span><span class="sh_symbol">));</span>
		<span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	Istream <span class="sh_symbol">&amp;</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&gt;&gt;</span> <span class="sh_symbol">(</span><span class="sh_type">char</span> <span class="sh_symbol">*</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> c<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> IS<span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(!~</span>c<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(*</span>x<span class="sh_symbol">++</span> <span class="sh_symbol">=</span> c<span class="sh_symbol">;</span> <span class="sh_symbol">!</span>IS<span class="sh_symbol">;</span> <span class="sh_symbol">*</span>x<span class="sh_symbol">++</span> <span class="sh_symbol">=</span> c<span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(!~</span>c<span class="sh_symbol">)</span> <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">return</span> <span class="sh_symbol">*</span>x <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_type">char</span> <span class="sh_function">get</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">*</span>next<span class="sh_symbol">++;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span> cin<span class="sh_symbol">;</span>

<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">Ostream</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">char</span> <span class="sh_symbol">*</span>next<span class="sh_symbol">,</span> buf<span class="sh_symbol">[</span><span class="sh_number">20030731</span><span class="sh_symbol">],</span> _buf<span class="sh_symbol">[</span><span class="sh_number">34</span><span class="sh_symbol">];</span>
	<span class="sh_function">Ostream</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>next <span class="sh_symbol">=</span> buf<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">flush</span><span class="sh_symbol">(</span><span class="sh_usertype">FILE</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>f <span class="sh_symbol">=</span> stdout<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">fwrite</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> next <span class="sh_symbol">-</span> buf<span class="sh_symbol">,</span> f<span class="sh_symbol">);</span> next <span class="sh_symbol">=</span> buf<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	Ostream <span class="sh_symbol">&amp;</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>x<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_function">put</span><span class="sh_symbol">(</span><span class="sh_number">48</span><span class="sh_symbol">),</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> x<span class="sh_symbol">;</span> x <span class="sh_symbol">/=</span> <span class="sh_number">10</span><span class="sh_symbol">)</span> _buf<span class="sh_symbol">[++</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x <span class="sh_symbol">%</span> <span class="sh_number">10</span> <span class="sh_symbol">|</span> <span class="sh_number">48</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> i<span class="sh_symbol">;</span> <span class="sh_symbol">--</span>i<span class="sh_symbol">)</span> <span class="sh_function">put</span><span class="sh_symbol">(</span>_buf<span class="sh_symbol">[</span>i<span class="sh_symbol">]);</span>
		<span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	Ostream <span class="sh_symbol">&amp;</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span><span class="sh_type">char</span> c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">put</span><span class="sh_symbol">(</span>c<span class="sh_symbol">),</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	Ostream <span class="sh_symbol">&amp;</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">char</span> <span class="sh_symbol">*</span>s<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">char</span> <span class="sh_symbol">*</span>p <span class="sh_symbol">=</span> <span class="sh_symbol">(</span><span class="sh_type">char</span><span class="sh_symbol">*)</span>s<span class="sh_symbol">;</span> <span class="sh_symbol">*</span>p<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>p<span class="sh_symbol">)</span> <span class="sh_function">put</span><span class="sh_symbol">(*</span>p<span class="sh_symbol">);</span> <span class="sh_keyword">return</span> <span class="sh_symbol">*</span><span class="sh_keyword">this</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">put</span><span class="sh_symbol">(</span><span class="sh_type">char</span> c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_symbol">*</span>next<span class="sh_symbol">++</span> <span class="sh_symbol">=</span> c<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span> cout<span class="sh_symbol">;</span></code></pre>
</template>
