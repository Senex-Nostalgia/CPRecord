<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>虚树 (深度栈算法)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> cnt_vir<span class="sh_symbol">,</span> vir<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> virp<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">idcmp</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> id<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> id<span class="sh_symbol">[</span>y<span class="sh_symbol">];</span><span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">DSA</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_preproc">#define</span> <span class="sh_function">ins</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">(</span>virp<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">],</span> stack<span class="sh_symbol">[++</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> vir<span class="sh_symbol">[</span>cnt_vir<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">)</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> top <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> cnt_vir <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">=</span> v<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> <span class="sh_symbol">!</span>top<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> top<span class="sh_symbol">;</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">)</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_function">ins</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
			stack<span class="sh_symbol">[</span>top <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>y <span class="sh_symbol">=</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]);</span> dep<span class="sh_symbol">[</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">];</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">);</span>
			virp<span class="sh_symbol">[</span> stack<span class="sh_symbol">[</span>top <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">!=</span> y<span class="sh_symbol">)</span> <span class="sh_function">ins</span><span class="sh_symbol">(</span>y<span class="sh_symbol">);</span> <span class="sh_function">ins</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> top<span class="sh_symbol">;</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">)</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>vir<span class="sh_symbol">,</span> vir <span class="sh_symbol">+</span> cnt_vir<span class="sh_symbol">,</span> idcmp<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
