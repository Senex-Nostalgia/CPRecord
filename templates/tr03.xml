<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>最近公共祖先 (LCA) 的 ST 表算法</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> cnt <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> id<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> o<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>LN<span class="sh_symbol">][</span>N<span class="sh_symbol">];</span>

<span class="sh_type">void</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> px <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span> st<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">][</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> id<span class="sh_symbol">[</span>px<span class="sh_symbol">],</span> o<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> id<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">((</span>y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_symbol">!=</span> px<span class="sh_symbol">)</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> x<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">build_sparse_table</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> <span class="sh_symbol">*</span>f<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>g <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>st<span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k <span class="sh_symbol">=</span> n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		f <span class="sh_symbol">=</span> g<span class="sh_symbol">,</span> g <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> k <span class="sh_symbol">-=</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> k<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
			g<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>f<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">)]);</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">LCA_relabel</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">==</span> y<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">&gt;</span> y<span class="sh_symbol">)</span> std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">);</span>
	<span class="sh_type">int</span> c <span class="sh_symbol">=</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>y <span class="sh_symbol">-</span> x<span class="sh_symbol">);</span>
	<span class="sh_keyword">return</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>x<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>y <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> c<span class="sh_symbol">)]);</span>
<span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">LCA</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">==</span> y<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">;</span>
	<span class="sh_type">int</span> L<span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> c<span class="sh_symbol">;</span> std<span class="sh_symbol">::</span><span class="sh_function">tie</span><span class="sh_symbol">(</span>L<span class="sh_symbol">,</span> R<span class="sh_symbol">)</span> <span class="sh_symbol">=</span> std<span class="sh_symbol">::</span><span class="sh_function">minmax</span><span class="sh_symbol">(</span>id<span class="sh_symbol">[</span>x<span class="sh_symbol">],</span> id<span class="sh_symbol">[</span>y<span class="sh_symbol">]),</span> c <span class="sh_symbol">=</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>R <span class="sh_symbol">-</span> L<span class="sh_symbol">);</span>
	<span class="sh_keyword">return</span> o<span class="sh_symbol">[</span><span class="sh_function">min</span><span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>L<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>R <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> c<span class="sh_symbol">)])];</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
