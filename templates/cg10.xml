<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>三维凸包 (卷包裹法)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">namespace</span> CH3D <span class="sh_cbracket">{</span>
	<span class="sh_keyword">typedef</span> std<span class="sh_symbol">::</span>pair <span class="sh_symbol">&lt;</span><span class="sh_type">int</span><span class="sh_symbol">,</span> <span class="sh_type">int</span><span class="sh_symbol">&gt;</span> pr<span class="sh_symbol">;</span>
	<span class="sh_keyword">typedef</span> std<span class="sh_symbol">::</span>set <span class="sh_symbol">&lt;</span>pr<span class="sh_symbol">&gt;</span> set<span class="sh_symbol">;</span>

	<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">triangle</span> <span class="sh_cbracket">{</span><span class="sh_usertype">vec3</span><span class="sh_normal"> </span>A<span class="sh_symbol">,</span> B<span class="sh_symbol">,</span> C<span class="sh_symbol">;</span><span class="sh_cbracket">}</span> tr<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

	<span class="sh_usertype">vec3</span><span class="sh_normal"> </span>p<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> r<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
	<span class="sh_usertype">set</span><span class="sh_normal"> </span>E<span class="sh_symbol">;</span>
	<span class="sh_type">int</span> n<span class="sh_symbol">,</span> cnt<span class="sh_symbol">;</span>

	<span class="sh_keyword">inline</span> <span class="sh_usertype">vec3</span><span class="sh_normal"> </span><span class="sh_function">randvec3</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">vec3</span><span class="sh_symbol">((</span><span class="sh_type">double</span><span class="sh_symbol">)</span><span class="sh_function">rand</span><span class="sh_symbol">()</span> <span class="sh_symbol">/</span> RAND_MAX<span class="sh_symbol">,</span> <span class="sh_symbol">(</span><span class="sh_type">double</span><span class="sh_symbol">)</span><span class="sh_function">rand</span><span class="sh_symbol">()</span> <span class="sh_symbol">/</span> RAND_MAX<span class="sh_symbol">,</span> <span class="sh_symbol">(</span><span class="sh_type">double</span><span class="sh_symbol">)</span><span class="sh_function">rand</span><span class="sh_symbol">()</span> <span class="sh_symbol">/</span> RAND_MAX<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">wrap</span><span class="sh_symbol">(</span><span class="sh_type">int</span> u<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>E<span class="sh_symbol">.</span><span class="sh_function">find</span><span class="sh_symbol">(</span><span class="sh_cbracket">{</span>u<span class="sh_symbol">,</span> v<span class="sh_cbracket">}</span><span class="sh_symbol">)</span> <span class="sh_symbol">==</span> E<span class="sh_symbol">.</span><span class="sh_function">end</span><span class="sh_symbol">())</span> <span class="sh_cbracket">{</span>
			<span class="sh_type">int</span> i<span class="sh_symbol">,</span> w <span class="sh_symbol">=</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
				<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">!=</span> u <span class="sh_symbol">&amp;&amp;</span> i <span class="sh_symbol">!=</span> v <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(!~</span>w <span class="sh_symbol">||</span> <span class="sh_function">ge</span><span class="sh_symbol">(</span><span class="sh_function">volume</span><span class="sh_symbol">(</span>q<span class="sh_symbol">[</span>w<span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>v<span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>i<span class="sh_symbol">]),</span> <span class="sh_number">0</span><span class="sh_symbol">)))</span> w <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(~</span>w<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
				tr<span class="sh_symbol">[</span>cnt<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>triangle<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>p<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>v<span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>w<span class="sh_symbol">]</span><span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
				E<span class="sh_symbol">.</span><span class="sh_function">emplace</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span> E<span class="sh_symbol">.</span><span class="sh_function">emplace</span><span class="sh_symbol">(</span>v<span class="sh_symbol">,</span> w<span class="sh_symbol">);</span> E<span class="sh_symbol">.</span><span class="sh_function">emplace</span><span class="sh_symbol">(</span>w<span class="sh_symbol">,</span> u<span class="sh_symbol">);</span>
				<span class="sh_function">wrap</span><span class="sh_symbol">(</span>w<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span> <span class="sh_function">wrap</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> w<span class="sh_symbol">);</span>
			<span class="sh_cbracket">}</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">main</span><span class="sh_symbol">(</span><span class="sh_type">int</span> _n<span class="sh_symbol">,</span> vec3 <span class="sh_symbol">*</span>_p<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">;</span>
		n <span class="sh_symbol">=</span> _n<span class="sh_symbol">;</span> cnt <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> E<span class="sh_symbol">.</span><span class="sh_function">clear</span><span class="sh_symbol">();</span>
		<span class="sh_function">memcpy</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> _p<span class="sh_symbol">,</span> n <span class="sh_symbol">*</span> <span class="sh_keyword">sizeof</span><span class="sh_symbol">(</span>vec3<span class="sh_symbol">));</span>
		std<span class="sh_symbol">::</span><span class="sh_function">iter_swap</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> std<span class="sh_symbol">::</span><span class="sh_function">min_element</span><span class="sh_symbol">(</span>p<span class="sh_symbol">,</span> p <span class="sh_symbol">+</span> n<span class="sh_symbol">));</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> q<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_function">randvec3</span><span class="sh_symbol">()</span> <span class="sh_symbol">*</span> <span class="sh_number">1e-6</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">2</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">ge</span><span class="sh_symbol">(</span><span class="sh_function">cross</span><span class="sh_symbol">(</span>q<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> q<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]).</span>z<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">))</span> std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>p<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]),</span> std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>q<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">],</span> q<span class="sh_symbol">[</span>i<span class="sh_symbol">]);</span>
		<span class="sh_function">wrap</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
