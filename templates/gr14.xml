<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>最小费用最大流 (Dinic)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">namespace</span> CF <span class="sh_cbracket">{</span>
	<span class="sh_preproc">#define</span> <span class="sh_function">ad</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">((</span>x <span class="sh_symbol">-</span> <span class="sh_number">1</span> <span class="sh_symbol">^</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">)</span>

	<span class="sh_keyword">const</span> <span class="sh_type">int</span> N <span class="sh_symbol">=</span> <span class="sh_number">2000</span><span class="sh_symbol">,</span> M <span class="sh_symbol">=</span> <span class="sh_number">100000</span><span class="sh_symbol">,</span> INF <span class="sh_symbol">=</span> <span class="sh_number">0x7f7f7f7f</span><span class="sh_symbol">;</span>

	<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">edge</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> u<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> c<span class="sh_symbol">,</span> f<span class="sh_symbol">;</span>
		<span class="sh_function">edge</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> u0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> v0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> c0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> f0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_function">u</span><span class="sh_symbol">(</span>u0<span class="sh_symbol">),</span> <span class="sh_function">v</span><span class="sh_symbol">(</span>v0<span class="sh_symbol">),</span> <span class="sh_function">c</span><span class="sh_symbol">(</span>c0<span class="sh_symbol">),</span> <span class="sh_function">f</span><span class="sh_symbol">(</span>f0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	<span class="sh_cbracket">}</span> e<span class="sh_symbol">[</span>M<span class="sh_symbol">];</span>

	<span class="sh_type">int</span> V <span class="sh_symbol">=</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> E <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> si <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> ti <span class="sh_symbol">=</span> <span class="sh_number">2</span><span class="sh_symbol">,</span> flow<span class="sh_symbol">,</span> cost<span class="sh_symbol">;</span>
	<span class="sh_type">int</span> first<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> next<span class="sh_symbol">[</span>M<span class="sh_symbol">];</span>
	<span class="sh_type">int</span> dep<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> cur<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> que<span class="sh_symbol">[</span>M <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">1</span><span class="sh_symbol">];</span>
	<span class="sh_type">bool</span> in_que<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> used<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">addedge</span><span class="sh_symbol">(</span><span class="sh_type">int</span> u<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">,</span> <span class="sh_type">int</span> c<span class="sh_symbol">,</span> <span class="sh_type">int</span> f<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		e<span class="sh_symbol">[++</span>E<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">edge</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> c<span class="sh_symbol">,</span> f<span class="sh_symbol">),</span> next<span class="sh_symbol">[</span>E<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> first<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> E<span class="sh_symbol">;</span>
		e<span class="sh_symbol">[++</span>E<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">edge</span><span class="sh_symbol">(</span>v<span class="sh_symbol">,</span> u<span class="sh_symbol">,</span> <span class="sh_symbol">-</span>c<span class="sh_symbol">),</span> next<span class="sh_symbol">[</span>E<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>v<span class="sh_symbol">],</span> first<span class="sh_symbol">[</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> E<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">bool</span> <span class="sh_function">bfs</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> h <span class="sh_symbol">=</span> M<span class="sh_symbol">,</span> t <span class="sh_symbol">=</span> h <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span>
		<span class="sh_function">memset</span><span class="sh_symbol">(</span>dep<span class="sh_symbol">,</span> <span class="sh_number">127</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> dep<span class="sh_symbol">);</span>
		que<span class="sh_symbol">[</span>h<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> ti<span class="sh_symbol">,</span> dep<span class="sh_symbol">[</span>ti<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> in_que<span class="sh_symbol">[</span>ti<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&lt;</span> t<span class="sh_symbol">;</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			x <span class="sh_symbol">=</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">++],</span> in_que<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
				<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>y <span class="sh_symbol">=</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c <span class="sh_symbol">&amp;&amp;</span> e<span class="sh_symbol">[</span><span class="sh_function">ad</span><span class="sh_symbol">(</span>i<span class="sh_symbol">)].</span>f<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
					dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c<span class="sh_symbol">;</span>
					<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>in_que<span class="sh_symbol">[</span>y<span class="sh_symbol">])</span>
						in_que<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">,</span> <span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;=</span> dep<span class="sh_symbol">[</span>que<span class="sh_symbol">[</span>h<span class="sh_symbol">]]</span> <span class="sh_symbol">?</span> que<span class="sh_symbol">[</span>t<span class="sh_symbol">++]</span> <span class="sh_symbol">:</span> que<span class="sh_symbol">[--</span>h<span class="sh_symbol">])</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span>
				<span class="sh_cbracket">}</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_keyword">return</span> dep<span class="sh_symbol">[</span>si<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> INF<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">int</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> lim<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> a<span class="sh_symbol">,</span> c<span class="sh_symbol">,</span> f <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">==</span> ti <span class="sh_symbol">||</span> <span class="sh_symbol">!</span>lim<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> lim<span class="sh_symbol">;</span>
		used<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>i <span class="sh_symbol">=</span> cur<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>c <span class="sh_symbol">&amp;&amp;</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span>used<span class="sh_symbol">[</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">])</span> <span class="sh_cbracket">{</span>
				a <span class="sh_symbol">=</span> std<span class="sh_symbol">::</span><span class="sh_function">min</span><span class="sh_symbol">(</span>lim <span class="sh_symbol">-</span> f<span class="sh_symbol">,</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f<span class="sh_symbol">);</span>
				c <span class="sh_symbol">=</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">,</span> a<span class="sh_symbol">);</span>
				e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>f <span class="sh_symbol">-=</span> c<span class="sh_symbol">,</span> e<span class="sh_symbol">[</span><span class="sh_function">ad</span><span class="sh_symbol">(</span>i<span class="sh_symbol">)].</span>f <span class="sh_symbol">+=</span> c<span class="sh_symbol">;</span>
				<span class="sh_keyword">if</span> <span class="sh_symbol">((</span>f <span class="sh_symbol">+=</span> c<span class="sh_symbol">)</span> <span class="sh_symbol">==</span> lim<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> f<span class="sh_symbol">;</span>
			<span class="sh_cbracket">}</span>
		<span class="sh_keyword">return</span> f<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">int</span> <span class="sh_function">Dinic</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> f<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>cost <span class="sh_symbol">=</span> flow <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_function">bfs</span><span class="sh_symbol">();</span> <span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_function">memcpy</span><span class="sh_symbol">(</span>cur<span class="sh_symbol">,</span> first<span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> cur<span class="sh_symbol">);</span>
			<span class="sh_function">memset</span><span class="sh_symbol">(</span>used<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> used<span class="sh_symbol">);</span>
			flow <span class="sh_symbol">+=</span> f <span class="sh_symbol">=</span> <span class="sh_function">dfs</span><span class="sh_symbol">(</span>si<span class="sh_symbol">,</span> INF<span class="sh_symbol">);</span>
			cost <span class="sh_symbol">+=</span> dep<span class="sh_symbol">[</span>si<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> f<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_keyword">return</span> cost<span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
