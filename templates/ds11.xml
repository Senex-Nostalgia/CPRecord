<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>析合树 (构造)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> n<span class="sh_symbol">,</span> p<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

<span class="sh_keyword">namespace</span> DCTree <span class="sh_cbracket">{</span>
	<span class="sh_keyword">typedef</span> std<span class="sh_symbol">::</span>pair <span class="sh_symbol">&lt;</span><span class="sh_type">int</span><span class="sh_symbol">,</span> <span class="sh_type">int</span><span class="sh_symbol">&gt;</span> pr<span class="sh_symbol">;</span>
	<span class="sh_keyword">const</span> <span class="sh_type">int</span> N <span class="sh_symbol">=</span> <span class="sh_symbol">::</span>N <span class="sh_symbol">*</span> <span class="sh_number">2</span><span class="sh_symbol">;</span>

	<span class="sh_keyword">enum</span> type <span class="sh_cbracket">{</span>leaf<span class="sh_symbol">,</span> disjunct<span class="sh_symbol">,</span> conjunct<span class="sh_cbracket">}</span> I<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

	<span class="sh_usertype">pr</span><span class="sh_normal"> </span>st<span class="sh_symbol">[</span><span class="sh_number">20</span><span class="sh_symbol">][</span>N<span class="sh_symbol">];</span>
	<span class="sh_type">int</span> stack1<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> stack2<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> stack<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
	<span class="sh_type">int</span> cnt<span class="sh_symbol">,</span> root<span class="sh_symbol">,</span> left<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> mid<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> right<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">up</span><span class="sh_symbol">(</span><span class="sh_usertype">pr</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">pr</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x<span class="sh_symbol">.</span>first <span class="sh_symbol">&gt;</span> y<span class="sh_symbol">.</span>first <span class="sh_symbol">?</span> x<span class="sh_symbol">.</span>first <span class="sh_symbol">=</span> y<span class="sh_symbol">.</span>first <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> x<span class="sh_symbol">.</span>second <span class="sh_symbol">&lt;</span> y<span class="sh_symbol">.</span>second <span class="sh_symbol">?</span> x<span class="sh_symbol">.</span>second <span class="sh_symbol">=</span> y<span class="sh_symbol">.</span>second <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">build_sparse_table</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k <span class="sh_symbol">=</span> n<span class="sh_symbol">;</span> <span class="sh_usertype">pr</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>f<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>g <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>st<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&lt;=</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			f <span class="sh_symbol">=</span> g<span class="sh_symbol">,</span> g <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> k <span class="sh_symbol">-=</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> k<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
				<span class="sh_function">up</span><span class="sh_symbol">(</span>g<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> f<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">)]);</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">is_consecutive</span><span class="sh_symbol">(</span><span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> c <span class="sh_symbol">=</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>R <span class="sh_symbol">-</span> L<span class="sh_symbol">);</span> <span class="sh_usertype">pr</span><span class="sh_normal"> </span>ans <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>L<span class="sh_symbol">];</span> <span class="sh_function">up</span><span class="sh_symbol">(</span>ans<span class="sh_symbol">,</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>R <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> c<span class="sh_symbol">)]);</span>
		<span class="sh_keyword">return</span> ans<span class="sh_symbol">.</span>second <span class="sh_symbol">-</span> ans<span class="sh_symbol">.</span>first <span class="sh_symbol">==</span> R <span class="sh_symbol">-</span> L <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_keyword">namespace</span> ST <span class="sh_cbracket">{</span>
		<span class="sh_preproc">#define</span> segc <span class="sh_type">int</span> M <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>L <span class="sh_symbol">+</span> R <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> lc <span class="sh_symbol">=</span> id <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> rc <span class="sh_symbol">=</span> lc <span class="sh_symbol">|</span> <span class="sh_number">1</span>
		<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">node</span> <span class="sh_cbracket">{</span><span class="sh_type">int</span> v<span class="sh_symbol">,</span> tag<span class="sh_symbol">;</span><span class="sh_cbracket">}</span> x<span class="sh_symbol">[</span>N <span class="sh_symbol">*</span> <span class="sh_number">4</span><span class="sh_symbol">];</span>

		<span class="sh_type">void</span> <span class="sh_function">build</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">,</span> <span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">=</span> L<span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>tag <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>L <span class="sh_symbol">==</span> R<span class="sh_symbol">)</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
			segc<span class="sh_symbol">;</span> <span class="sh_function">build</span><span class="sh_symbol">(</span>lc<span class="sh_symbol">,</span> L<span class="sh_symbol">,</span> M<span class="sh_symbol">),</span> <span class="sh_function">build</span><span class="sh_symbol">(</span>rc<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> R<span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span>

		<span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">,</span> <span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">,</span> <span class="sh_type">int</span> ql<span class="sh_symbol">,</span> <span class="sh_type">int</span> qr<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>ql <span class="sh_symbol">&lt;=</span> L <span class="sh_symbol">&amp;&amp;</span> R <span class="sh_symbol">&lt;=</span> qr<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">+=</span> v<span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>tag <span class="sh_symbol">+=</span> v<span class="sh_symbol">;</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
			segc<span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>ql <span class="sh_symbol">&lt;=</span> M<span class="sh_symbol">)</span> <span class="sh_function">add</span><span class="sh_symbol">(</span>lc<span class="sh_symbol">,</span> L<span class="sh_symbol">,</span> M<span class="sh_symbol">,</span> ql<span class="sh_symbol">,</span> qr<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>qr <span class="sh_symbol">&gt;</span> M<span class="sh_symbol">)</span> <span class="sh_function">add</span><span class="sh_symbol">(</span>rc<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> ql<span class="sh_symbol">,</span> qr<span class="sh_symbol">,</span> v<span class="sh_symbol">);</span>
			x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">=</span> std<span class="sh_symbol">::</span><span class="sh_function">min</span><span class="sh_symbol">(</span>x<span class="sh_symbol">[</span>lc<span class="sh_symbol">].</span>v<span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>rc<span class="sh_symbol">].</span>v<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>tag<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>

		<span class="sh_type">int</span> <span class="sh_function">find_suf</span><span class="sh_symbol">(</span><span class="sh_type">int</span> id<span class="sh_symbol">,</span> <span class="sh_type">int</span> L<span class="sh_symbol">,</span> <span class="sh_type">int</span> R<span class="sh_symbol">,</span> <span class="sh_type">int</span> v<span class="sh_symbol">,</span> <span class="sh_type">int</span> cv <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>cv <span class="sh_symbol">+</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>v <span class="sh_symbol">&gt;</span> v<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>L <span class="sh_symbol">==</span> R<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> L<span class="sh_symbol">;</span>
			segc<span class="sh_symbol">,</span> p <span class="sh_symbol">=</span> <span class="sh_function">find_suf</span><span class="sh_symbol">(</span>lc<span class="sh_symbol">,</span> L<span class="sh_symbol">,</span> M<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> cv <span class="sh_symbol">+=</span> x<span class="sh_symbol">[</span>id<span class="sh_symbol">].</span>tag<span class="sh_symbol">);</span>
			<span class="sh_keyword">return</span> <span class="sh_symbol">~</span>p <span class="sh_symbol">?</span> p <span class="sh_symbol">:</span> <span class="sh_function">find_suf</span><span class="sh_symbol">(</span>rc<span class="sh_symbol">,</span> M <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> cv<span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_cbracket">}</span>

	<span class="sh_type">int</span> pa<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> fc<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> nc<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> deg<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">link</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> px<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>pa<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> px<span class="sh_symbol">,</span> nc<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> fc<span class="sh_symbol">[</span>px<span class="sh_symbol">],</span> fc<span class="sh_symbol">[</span>px<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> <span class="sh_symbol">++</span>deg<span class="sh_symbol">[</span>px<span class="sh_symbol">];</span><span class="sh_cbracket">}</span>

	<span class="sh_type">void</span> <span class="sh_function">build</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">,</span> l<span class="sh_symbol">,</span> top1 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> top2 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> top <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>v <span class="sh_symbol">=</span> root<span class="sh_symbol">,</span> u<span class="sh_symbol">;</span> cnt <span class="sh_symbol">=</span> n<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> st<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">][</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">pr</span><span class="sh_symbol">(</span>p<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]),</span> left<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> right<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">,</span> I<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> leaf<span class="sh_symbol">;</span>
		<span class="sh_function">build_sparse_table</span><span class="sh_symbol">(),</span> ST<span class="sh_symbol">::</span><span class="sh_function">build</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> n<span class="sh_symbol">);</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> top1 <span class="sh_symbol">&amp;&amp;</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> p<span class="sh_symbol">[</span> stack1<span class="sh_symbol">[</span>top1<span class="sh_symbol">]</span> <span class="sh_symbol">];</span> <span class="sh_symbol">--</span>top1<span class="sh_symbol">)</span>
				ST<span class="sh_symbol">::</span><span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> n<span class="sh_symbol">,</span> stack1<span class="sh_symbol">[</span>top1 <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> stack1<span class="sh_symbol">[</span>top1<span class="sh_symbol">],</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> p<span class="sh_symbol">[</span> stack1<span class="sh_symbol">[</span>top1<span class="sh_symbol">]</span> <span class="sh_symbol">]);</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> top2 <span class="sh_symbol">&amp;&amp;</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> p<span class="sh_symbol">[</span> stack2<span class="sh_symbol">[</span>top2<span class="sh_symbol">]</span> <span class="sh_symbol">];</span> <span class="sh_symbol">--</span>top2<span class="sh_symbol">)</span>
				ST<span class="sh_symbol">::</span><span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> n<span class="sh_symbol">,</span> stack2<span class="sh_symbol">[</span>top2 <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> stack2<span class="sh_symbol">[</span>top2<span class="sh_symbol">],</span> p<span class="sh_symbol">[</span> stack2<span class="sh_symbol">[</span>top2<span class="sh_symbol">]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">-</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">]);</span>
			stack1<span class="sh_symbol">[++</span>top1<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> stack2<span class="sh_symbol">[++</span>top2<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>
			l <span class="sh_symbol">=</span> ST<span class="sh_symbol">::</span><span class="sh_function">find_suf</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> n<span class="sh_symbol">,</span> i<span class="sh_symbol">);</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>v <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span> top <span class="sh_symbol">&amp;&amp;</span> left<span class="sh_symbol">[</span> u <span class="sh_symbol">=</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">&gt;=</span> l<span class="sh_symbol">;</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">)</span>
				<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>I<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> conjunct <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">is_consecutive</span><span class="sh_symbol">(</span>mid<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">))</span>
					right<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">,</span> <span class="sh_function">link</span><span class="sh_symbol">(</span>v<span class="sh_symbol">,</span> u<span class="sh_symbol">),</span> v <span class="sh_symbol">=</span> u<span class="sh_symbol">;</span>
				<span class="sh_keyword">else</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">is_consecutive</span><span class="sh_symbol">(</span>left<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">))</span> <span class="sh_cbracket">{</span>
					I<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> conjunct<span class="sh_symbol">,</span> <span class="sh_function">link</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> cnt<span class="sh_symbol">),</span> <span class="sh_function">link</span><span class="sh_symbol">(</span>v<span class="sh_symbol">,</span> cnt<span class="sh_symbol">);</span>
					left<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> left<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> right<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">,</span> mid<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> left<span class="sh_symbol">[</span>v<span class="sh_symbol">],</span> v <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
				<span class="sh_cbracket">}</span> <span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
					I<span class="sh_symbol">[++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> disjunct<span class="sh_symbol">,</span> <span class="sh_function">link</span><span class="sh_symbol">(</span>v<span class="sh_symbol">,</span> cnt<span class="sh_symbol">);</span>
					<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> top <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span><span class="sh_function">is_consecutive</span><span class="sh_symbol">(</span>left<span class="sh_symbol">[</span> u <span class="sh_symbol">=</span> stack<span class="sh_symbol">[</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">],</span> i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span> <span class="sh_symbol">--</span>top<span class="sh_symbol">)</span>
						<span class="sh_function">link</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> cnt<span class="sh_symbol">);</span> <span class="sh_function">link</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> cnt<span class="sh_symbol">);</span>
					left<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> left<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> right<span class="sh_symbol">[</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">,</span> v <span class="sh_symbol">=</span> cnt<span class="sh_symbol">;</span>
				<span class="sh_cbracket">}</span>
			stack<span class="sh_symbol">[++</span>top<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> v<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
