<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>长链剖分 (Long-Short Decomposition)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> p<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> dep<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
<span class="sh_type">int</span> cnt <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> id<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> prf<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> top<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
<span class="sh_type">int</span> len<span class="sh_symbol">[</span>N<span class="sh_symbol">],</span> buf<span class="sh_symbol">[</span>N <span class="sh_symbol">*</span> <span class="sh_number">3</span><span class="sh_symbol">],</span> <span class="sh_symbol">*</span>alloc <span class="sh_symbol">=</span> buf<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>near<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>

<span class="sh_type">void</span> <span class="sh_function">dfs_len</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> y<span class="sh_symbol">,</span> <span class="sh_symbol">&amp;</span>z <span class="sh_symbol">=</span> prf<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> LN <span class="sh_symbol">&amp;&amp;</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">];</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> P<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">][</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">]];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">((</span>y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_symbol">!=</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span> <span class="sh_cbracket">{</span>
			p<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> dep<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
			<span class="sh_function">dfs_len</span><span class="sh_symbol">(</span>y<span class="sh_symbol">),</span> <span class="sh_function">up</span><span class="sh_symbol">(</span>f<span class="sh_symbol">[</span>x<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
			f<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> f<span class="sh_symbol">[</span>z<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> z <span class="sh_symbol">=</span> y <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">dfs_lsd</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> r<span class="sh_symbol">,</span> <span class="sh_type">int</span> l <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// long-short decomposition</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> y<span class="sh_symbol">;</span> id<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">++</span>cnt<span class="sh_symbol">,</span> top<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> r<span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>prf<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span> <span class="sh_cbracket">{</span>len<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> l<span class="sh_symbol">;</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_function">dfs_lsd</span><span class="sh_symbol">(</span>prf<span class="sh_symbol">[</span>x<span class="sh_symbol">],</span> r<span class="sh_symbol">,</span> l <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">),</span> len<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> len<span class="sh_symbol">[</span>prf<span class="sh_symbol">[</span>x<span class="sh_symbol">]];</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> first<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span> i<span class="sh_symbol">;</span> i <span class="sh_symbol">=</span> next<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>top<span class="sh_symbol">[</span>y <span class="sh_symbol">=</span> to<span class="sh_symbol">[</span>i<span class="sh_symbol">]])</span> <span class="sh_function">dfs_lsd</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> y<span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> k<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(!</span>k<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> x<span class="sh_symbol">;</span>
	x <span class="sh_symbol">=</span> P<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>x<span class="sh_symbol">],</span> near<span class="sh_symbol">[</span>top<span class="sh_symbol">[</span>x<span class="sh_symbol">]][</span>dep<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> dep<span class="sh_symbol">[</span>top<span class="sh_symbol">[</span>x<span class="sh_symbol">]]</span> <span class="sh_symbol">-</span> <span class="sh_symbol">(</span>k <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>k<span class="sh_symbol">)))];</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">void</span> <span class="sh_function">init</span><span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>pt<span class="sh_symbol">;</span>
	<span class="sh_symbol">*</span>f <span class="sh_symbol">=</span> <span class="sh_symbol">*</span>dep <span class="sh_symbol">=</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_function">dfs_len</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">),</span> <span class="sh_function">dfs_lsd</span><span class="sh_symbol">(</span><span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> N<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>top<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			pt <span class="sh_symbol">=</span> alloc <span class="sh_symbol">+</span> len<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> alloc <span class="sh_symbol">+=</span> len<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">*</span> <span class="sh_number">2</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_symbol">*</span>pt <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> p<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span> j <span class="sh_symbol">&lt;=</span> len<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&amp;&amp;</span> x<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span> pt<span class="sh_symbol">[-</span>j<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> prf<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span> j <span class="sh_symbol">&lt;=</span> len<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&amp;&amp;</span> x<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> prf<span class="sh_symbol">[</span>x<span class="sh_symbol">])</span> pt<span class="sh_symbol">[</span>j<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
