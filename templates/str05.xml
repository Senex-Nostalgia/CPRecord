<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>后缀数组 (倍增构造) 与最长公共前缀</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">LCP</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>sa<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>rnk<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>st<span class="sh_symbol">[</span>LN<span class="sh_symbol">];</span>
	<span class="sh_function">LCP</span> <span class="sh_symbol">()</span> <span class="sh_symbol">:</span> <span class="sh_function">n</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">),</span> <span class="sh_function">sa</span><span class="sh_symbol">(</span>NULL<span class="sh_symbol">),</span> <span class="sh_function">rnk</span><span class="sh_symbol">(</span>NULL<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">memset</span><span class="sh_symbol">(</span>st<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_keyword">sizeof</span> st<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_symbol">~</span><span class="sh_function">LCP</span> <span class="sh_symbol">()</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>sa<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> sa<span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>rnk<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> rnk<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> LN<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> st<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">construct</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">char</span> <span class="sh_symbol">*</span>s<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k<span class="sh_symbol">,</span> m <span class="sh_symbol">=</span> <span class="sh_number">256</span><span class="sh_symbol">,</span> p<span class="sh_symbol">,</span> limit<span class="sh_symbol">;</span> n <span class="sh_symbol">=</span> <span class="sh_function">strlen</span><span class="sh_symbol">(</span>s<span class="sh_symbol">);</span>
		<span class="sh_type">int</span> <span class="sh_symbol">*</span>x <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>n <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> <span class="sh_symbol">*</span>y <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>n <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> <span class="sh_symbol">*</span>buf <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span><span class="sh_function">max</span><span class="sh_symbol">(</span>n<span class="sh_symbol">,</span> m<span class="sh_symbol">)],</span> <span class="sh_symbol">*</span>f<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>g <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>n <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">];</span>
		<span class="sh_keyword">auto</span> cmp <span class="sh_symbol">=</span> <span class="sh_symbol">[</span><span class="sh_keyword">this</span><span class="sh_symbol">]</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> <span class="sh_symbol">*</span>a<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> v<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> l<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> a<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> a<span class="sh_symbol">[</span>v<span class="sh_symbol">]</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span>u <span class="sh_symbol">+</span> l <span class="sh_symbol">&gt;=</span> n <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> a<span class="sh_symbol">[</span>u <span class="sh_symbol">+</span> l<span class="sh_symbol">])</span> <span class="sh_symbol">==</span> <span class="sh_symbol">(</span>v <span class="sh_symbol">+</span> l <span class="sh_symbol">&gt;=</span> n <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> a<span class="sh_symbol">[</span>v <span class="sh_symbol">+</span> l<span class="sh_symbol">]);</span><span class="sh_cbracket">}</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>sa<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> sa<span class="sh_symbol">;</span> sa <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>n<span class="sh_symbol">];</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>rnk<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> rnk<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> LN<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> st<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> sa<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span> <span class="sh_type">char</span><span class="sh_symbol">)</span>s<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
		std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>sa<span class="sh_symbol">,</span> sa <span class="sh_symbol">+</span> n<span class="sh_symbol">,</span> <span class="sh_symbol">[</span>s<span class="sh_symbol">]</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span> <span class="sh_type">char</span><span class="sh_symbol">)</span>s<span class="sh_symbol">[</span>u<span class="sh_symbol">]</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span> <span class="sh_type">char</span><span class="sh_symbol">)</span>s<span class="sh_symbol">[</span>v<span class="sh_symbol">];</span><span class="sh_cbracket">}</span><span class="sh_symbol">);</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;&lt;=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> m <span class="sh_symbol">=</span> <span class="sh_symbol">++</span>p<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			std<span class="sh_symbol">::</span><span class="sh_function">iota</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> y <span class="sh_symbol">+</span> j<span class="sh_symbol">,</span> n <span class="sh_symbol">-</span> j<span class="sh_symbol">),</span> p <span class="sh_symbol">=</span> j<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(</span>sa<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;=</span> j<span class="sh_symbol">)</span> y<span class="sh_symbol">[</span>p<span class="sh_symbol">++]</span> <span class="sh_symbol">=</span> sa<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> j<span class="sh_symbol">;</span>
			<span class="sh_function">memset</span><span class="sh_symbol">(</span>buf<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> m <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">2</span><span class="sh_symbol">);</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_symbol">++</span>buf<span class="sh_symbol">[</span> x<span class="sh_symbol">[</span>y<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">];</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> m<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> buf<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">+=</span> buf<span class="sh_symbol">[</span>i <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">];</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&gt;=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_symbol">--</span>i<span class="sh_symbol">)</span> sa<span class="sh_symbol">[</span> <span class="sh_symbol">--</span>buf<span class="sh_symbol">[</span> x<span class="sh_symbol">[</span>y<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
			std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">);</span>
			x<span class="sh_symbol">[*</span>sa<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> p <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> x<span class="sh_symbol">[</span>n<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> x<span class="sh_symbol">[</span>sa<span class="sh_symbol">[</span>i<span class="sh_symbol">]]</span> <span class="sh_symbol">=</span> <span class="sh_symbol">(</span><span class="sh_function">cmp</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> sa<span class="sh_symbol">[</span>i <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> sa<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> j<span class="sh_symbol">)</span> <span class="sh_symbol">?</span> p <span class="sh_symbol">:</span> <span class="sh_symbol">++</span>p<span class="sh_symbol">);</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>p <span class="sh_symbol">&gt;=</span> n<span class="sh_symbol">)</span> <span class="sh_keyword">break</span><span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>rnk <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> n <span class="sh_symbol">==</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">*</span>x <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">else</span> <span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_symbol">--</span>x<span class="sh_symbol">[</span>i<span class="sh_symbol">];</span>
		<span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> buf<span class="sh_symbol">,</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> y<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>p <span class="sh_symbol">=</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>p <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">--</span>p<span class="sh_symbol">,</span> <span class="sh_symbol">!</span>x<span class="sh_symbol">[</span>i<span class="sh_symbol">])</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> sa<span class="sh_symbol">[</span>x<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">],</span> limit <span class="sh_symbol">=</span> n <span class="sh_symbol">-</span> <span class="sh_function">max</span><span class="sh_symbol">(</span>i<span class="sh_symbol">,</span> j<span class="sh_symbol">);</span> p <span class="sh_symbol">&lt;</span> limit <span class="sh_symbol">&amp;&amp;</span> s<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> p<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> s<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> p<span class="sh_symbol">];</span> <span class="sh_symbol">++</span>p<span class="sh_symbol">);</span>
			g<span class="sh_symbol">[</span> x<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-</span> <span class="sh_number">1</span> <span class="sh_symbol">]</span> <span class="sh_symbol">=</span> p<span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_symbol">*</span>st <span class="sh_symbol">=</span> g<span class="sh_symbol">,</span> k <span class="sh_symbol">=</span> n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
			k <span class="sh_symbol">-=</span> <span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">,</span> f <span class="sh_symbol">=</span> g<span class="sh_symbol">,</span> g <span class="sh_symbol">=</span> st<span class="sh_symbol">[</span>j <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">int</span><span class="sh_symbol">[</span>k <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">];</span>
			<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> k<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span>
				g<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>f<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> f<span class="sh_symbol">[</span>i <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> j<span class="sh_symbol">)]);</span>
		<span class="sh_cbracket">}</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">()</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_function">assert</span><span class="sh_symbol">((</span><span class="sh_type">unsigned</span><span class="sh_symbol">)</span>u <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span><span class="sh_symbol">)</span>n <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span><span class="sh_symbol">)</span>v <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_type">unsigned</span><span class="sh_symbol">)</span>n<span class="sh_symbol">);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>u <span class="sh_symbol">==</span> v<span class="sh_symbol">)</span> <span class="sh_keyword">return</span> n <span class="sh_symbol">-</span> u<span class="sh_symbol">;</span>
		<span class="sh_type">int</span> L<span class="sh_symbol">,</span> R<span class="sh_symbol">,</span> c<span class="sh_symbol">;</span> std<span class="sh_symbol">::</span><span class="sh_function">tie</span><span class="sh_symbol">(</span>L<span class="sh_symbol">,</span> R<span class="sh_symbol">)</span> <span class="sh_symbol">=</span> std<span class="sh_symbol">::</span><span class="sh_function">minmax</span><span class="sh_symbol">(</span>rnk<span class="sh_symbol">[</span>u<span class="sh_symbol">],</span> rnk<span class="sh_symbol">[</span>v<span class="sh_symbol">]),</span> c <span class="sh_symbol">=</span> <span class="sh_function">lg2</span><span class="sh_symbol">(</span>R <span class="sh_symbol">-</span> L<span class="sh_symbol">);</span>
		<span class="sh_keyword">return</span> <span class="sh_function">min</span><span class="sh_symbol">(</span>st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>L<span class="sh_symbol">],</span> st<span class="sh_symbol">[</span>c<span class="sh_symbol">][</span>R <span class="sh_symbol">-</span> <span class="sh_symbol">(</span><span class="sh_number">1</span> <span class="sh_symbol">&lt;&lt;</span> c<span class="sh_symbol">)]);</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
