<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>动态规划的转移</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">up</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">down</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">&gt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">min</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">max</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> y <span class="sh_symbol">:</span> x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span> <span class="sh_function">reduce</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">+=</span> x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">31</span> <span class="sh_symbol">&amp;</span> mod<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">+=</span> y <span class="sh_symbol">-</span> mod<span class="sh_symbol">,</span> x <span class="sh_symbol">+=</span> x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">31</span> <span class="sh_symbol">&amp;</span> mod<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">sub</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">-=</span> y<span class="sh_symbol">,</span> x <span class="sh_symbol">+=</span> x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">31</span> <span class="sh_symbol">&amp;</span> mod<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span> <span class="sh_function">half</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_symbol">(-(</span>x <span class="sh_symbol">&amp;</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;</span> iv2<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span> <span class="sh_function">neg</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">=</span> <span class="sh_symbol">(!</span>x <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;</span> <span class="sh_symbol">(</span>mod <span class="sh_symbol">-</span> x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// another ver.</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">up</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> <span class="sh_number">1</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">down</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&gt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> <span class="sh_number">1</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span> <span class="sh_function">add</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">+=</span> y <span class="sh_symbol">-</span> mod<span class="sh_symbol">,</span> x <span class="sh_symbol">+=</span> x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">31</span> <span class="sh_symbol">&amp;</span> mod<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_symbol">&amp;</span> <span class="sh_function">sub</span><span class="sh_symbol">(</span><span class="sh_type">int</span> <span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">-=</span> y<span class="sh_symbol">,</span> x <span class="sh_symbol">+=</span> x <span class="sh_symbol">&gt;&gt;</span> <span class="sh_number">31</span> <span class="sh_symbol">&amp;</span> mod<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>

<span class="sh_comment">// templated ver.</span>
<span class="sh_preproc">#define</span> <span class="sh_usertype">templated</span><span class="sh_normal"> </span><span class="sh_keyword">template</span> <span class="sh_symbol">&lt;</span><span class="sh_keyword">typename</span><span class="sh_normal"> </span><span class="sh_classname">T</span><span class="sh_symbol">&gt;</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">up</span><span class="sh_symbol">(</span><span class="sh_usertype">T</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> <span class="sh_number">1</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">down</span><span class="sh_symbol">(</span><span class="sh_usertype">T</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&gt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> <span class="sh_number">1</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span><span class="sh_function">min</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_keyword">inline</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span><span class="sh_function">max</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>x<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">T</span><span class="sh_normal"> </span>y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> x <span class="sh_symbol">&lt;</span> y <span class="sh_symbol">?</span> y <span class="sh_symbol">:</span> x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span></code></pre>
</template>
