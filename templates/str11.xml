<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>多串后缀自动机 / 广义后缀自动机</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_preproc">#define</span> <span class="sh_usertype">q</span><span class="sh_normal"> </span>d<span class="sh_symbol">[</span>p<span class="sh_symbol">][</span>x<span class="sh_symbol">]</span>
<span class="sh_preproc">#define</span> <span class="sh_function">try_split</span><span class="sh_symbol">(</span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_symbol">\</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>val<span class="sh_symbol">[</span>p<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span> <span class="sh_symbol">==</span> val<span class="sh_symbol">[</span>q<span class="sh_symbol">])</span> v <span class="sh_symbol">=</span> q<span class="sh_symbol">;</span> <span class="sh_symbol">\</span>
	<span class="sh_keyword">else</span> <span class="sh_cbracket">{</span> <span class="sh_symbol">\</span>
		<span class="sh_type">int</span> nq <span class="sh_symbol">=</span> <span class="sh_symbol">++</span>cnt<span class="sh_symbol">;</span> <span class="sh_symbol">\</span>
		val<span class="sh_symbol">[</span>nq<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> val<span class="sh_symbol">[</span>p<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> <span class="sh_function">memcpy</span><span class="sh_symbol">(</span>d<span class="sh_symbol">[</span>nq<span class="sh_symbol">],</span> d<span class="sh_symbol">[</span>q<span class="sh_symbol">],</span> <span class="sh_number">104</span><span class="sh_symbol">);</span> <span class="sh_symbol">\</span>
		pa<span class="sh_symbol">[</span>nq<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>q<span class="sh_symbol">],</span> v <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>q<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> nq<span class="sh_symbol">;</span> <span class="sh_symbol">\</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> Q <span class="sh_symbol">=</span> q<span class="sh_symbol">;</span> p <span class="sh_symbol">&amp;&amp;</span> q <span class="sh_symbol">==</span> Q<span class="sh_symbol">;</span> q <span class="sh_symbol">=</span> nq<span class="sh_symbol">,</span> p <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>p<span class="sh_symbol">]);</span> <span class="sh_symbol">\</span>
	<span class="sh_cbracket">}</span> <span class="sh_symbol">\</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">extend</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>p <span class="sh_symbol">=</span> np<span class="sh_symbol">,</span> q<span class="sh_symbol">)</span> <span class="sh_function">try_split</span><span class="sh_symbol">(</span>np<span class="sh_symbol">)</span>
	<span class="sh_keyword">else</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>val<span class="sh_symbol">[</span>np <span class="sh_symbol">=</span> <span class="sh_symbol">++</span>cnt<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> val<span class="sh_symbol">[</span>p<span class="sh_symbol">]</span> <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> p <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span>q<span class="sh_symbol">;</span> q <span class="sh_symbol">=</span> np<span class="sh_symbol">,</span> p <span class="sh_symbol">=</span> pa<span class="sh_symbol">[</span>p<span class="sh_symbol">]);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>p<span class="sh_symbol">)</span> <span class="sh_function">try_split</span><span class="sh_symbol">(</span>pa<span class="sh_symbol">[</span>np<span class="sh_symbol">])</span> <span class="sh_keyword">else</span> pa<span class="sh_symbol">[</span>np<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">return</span> np<span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>
<span class="sh_preproc">#undef</span> q</code></pre>
</template>
