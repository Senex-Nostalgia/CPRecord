<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>动态树 (Link-Cut Tree)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">namespace</span> LCT <span class="sh_cbracket">{</span>
	<span class="sh_preproc">#define</span> <span class="sh_usertype">pa</span><span class="sh_normal"> </span>p<span class="sh_symbol">[</span>nd<span class="sh_symbol">]</span>
	<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">node</span> <span class="sh_cbracket">{</span><span class="sh_type">bool</span> rev<span class="sh_symbol">;</span> <span class="sh_type">int</span> v<span class="sh_symbol">,</span> p<span class="sh_symbol">,</span> c<span class="sh_symbol">[</span><span class="sh_number">2</span><span class="sh_symbol">];</span><span class="sh_cbracket">}</span> nd<span class="sh_symbol">[</span>N<span class="sh_symbol">];</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">int</span> <span class="sh_function">dir</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_symbol">!</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">?</span> <span class="sh_symbol">-</span><span class="sh_number">1</span> <span class="sh_symbol">:</span> x <span class="sh_symbol">==</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>pa<span class="sh_symbol">.</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">?</span> <span class="sh_number">0</span> <span class="sh_symbol">:</span> x <span class="sh_symbol">==</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>pa<span class="sh_symbol">.</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">?</span> <span class="sh_number">1</span> <span class="sh_symbol">:</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">set</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> px<span class="sh_symbol">,</span> <span class="sh_type">int</span> c<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">=</span> px<span class="sh_symbol">,</span> <span class="sh_symbol">~</span>c<span class="sh_symbol">)</span> nd<span class="sh_symbol">[</span>px<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span>c<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">reverse</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span>std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>rev <span class="sh_symbol">=</span> <span class="sh_symbol">!</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>rev<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">push_down</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">if</span> <span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>rev<span class="sh_symbol">)</span> <span class="sh_function">reverse</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]),</span> <span class="sh_function">reverse</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>rev <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">pull_down</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">if</span> <span class="sh_symbol">(~</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_function">pull_down</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">);</span> <span class="sh_function">push_down</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_keyword">inline</span> <span class="sh_type">void</span> <span class="sh_function">update</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">const</span> <span class="sh_type">int</span> l <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">],</span> r <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">];</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>v <span class="sh_symbol">=</span> <span class="sh_symbol">(</span>l <span class="sh_symbol">?</span> nd<span class="sh_symbol">[</span>l<span class="sh_symbol">].</span>v <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>r <span class="sh_symbol">?</span> nd<span class="sh_symbol">[</span>r<span class="sh_symbol">].</span>v <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">rotate</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_type">int</span> y <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">,</span> d <span class="sh_symbol">=</span> <span class="sh_symbol">!</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span> <span class="sh_function">set</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span>d<span class="sh_symbol">],</span> y<span class="sh_symbol">,</span> <span class="sh_symbol">!</span>d<span class="sh_symbol">),</span> <span class="sh_function">set</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> nd<span class="sh_symbol">[</span>y<span class="sh_symbol">].</span>p<span class="sh_symbol">,</span> <span class="sh_function">dir</span><span class="sh_symbol">(</span>y<span class="sh_symbol">)),</span> <span class="sh_function">set</span><span class="sh_symbol">(</span>y<span class="sh_symbol">,</span> x<span class="sh_symbol">,</span> d<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_function">pull_down</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span> <span class="sh_symbol">~</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span> <span class="sh_function">rotate</span><span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_keyword">if</span> <span class="sh_symbol">(~</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">))</span> <span class="sh_function">rotate</span><span class="sh_symbol">(</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>x<span class="sh_symbol">)</span> <span class="sh_symbol">^</span> <span class="sh_function">dir</span><span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">)</span> <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">);</span> <span class="sh_function">update</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">access</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> y <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> x<span class="sh_symbol">;</span> y <span class="sh_symbol">=</span> x<span class="sh_symbol">,</span> x <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p<span class="sh_symbol">)</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> <span class="sh_function">update</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">make_root</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">access</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> <span class="sh_function">reverse</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">int</span> <span class="sh_function">find_root</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_function">access</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span>x<span class="sh_symbol">);</span> <span class="sh_function">push_down</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">];</span> x <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]);</span> <span class="sh_keyword">return</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> x<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">int</span> <span class="sh_function">split</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">make_root</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> <span class="sh_function">access</span><span class="sh_symbol">(</span>y<span class="sh_symbol">),</span> <span class="sh_function">splay</span><span class="sh_symbol">(</span>y<span class="sh_symbol">),</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">link</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">make_root</span><span class="sh_symbol">(</span>x<span class="sh_symbol">),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">=</span> y<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">cut</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">split</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">),</span> nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>y<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_function">update</span><span class="sh_symbol">(</span>y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">trylink</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>x <span class="sh_symbol">==</span> y <span class="sh_symbol">||</span> <span class="sh_symbol">(</span><span class="sh_function">split</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">),</span> <span class="sh_symbol">~</span><span class="sh_function">dir</span><span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_symbol">||</span> <span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">=</span> y<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">trycut</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_function">split</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">),</span> nd<span class="sh_symbol">[</span>y<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">==</span> x <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span>nd<span class="sh_symbol">[</span>x<span class="sh_symbol">].</span>p <span class="sh_symbol">=</span> nd<span class="sh_symbol">[</span>y<span class="sh_symbol">].</span>c<span class="sh_symbol">[</span><span class="sh_number">0</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_function">update</span><span class="sh_symbol">(</span>y<span class="sh_symbol">),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
