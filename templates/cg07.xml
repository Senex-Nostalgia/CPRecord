<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>半平面交 (平行处理版)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">HPIcmp</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">sameDir</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> v<span class="sh_symbol">)</span> <span class="sh_symbol">?</span> <span class="sh_function">gt</span><span class="sh_symbol">((</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>A<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_function">fabs</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>B<span class="sh_symbol">))</span> <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>C<span class="sh_symbol">,</span> <span class="sh_symbol">(</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>v<span class="sh_symbol">.</span>A<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_function">fabs</span><span class="sh_symbol">(</span>v<span class="sh_symbol">.</span>B<span class="sh_symbol">))</span> <span class="sh_symbol">*</span> u<span class="sh_symbol">.</span>C<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> u<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">&lt;&lt;</span> v<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">();</span><span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">geStraight</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>A<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span>B<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>A <span class="sh_symbol">^</span> B<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">||</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>A <span class="sh_symbol">^</span> B<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>A <span class="sh_symbol">*</span> B<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">);</span><span class="sh_cbracket">}</span>

<span class="sh_keyword">inline</span> <span class="sh_type">bool</span> <span class="sh_function">para_nega_test</span><span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>u<span class="sh_symbol">,</span> <span class="sh_keyword">const</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span>v<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">return</span> <span class="sh_function">parallel</span><span class="sh_symbol">(</span>u<span class="sh_symbol">,</span> v<span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">lt</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">()</span> <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span><span class="sh_function">normVec</span><span class="sh_symbol">(),</span> <span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">(</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>A<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_function">fabs</span><span class="sh_symbol">(</span>u<span class="sh_symbol">.</span>B<span class="sh_symbol">))</span> <span class="sh_symbol">*</span> v<span class="sh_symbol">.</span>C <span class="sh_symbol">+</span> <span class="sh_symbol">(</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>v<span class="sh_symbol">.</span>A<span class="sh_symbol">)</span> <span class="sh_symbol">+</span> <span class="sh_function">fabs</span><span class="sh_symbol">(</span>v<span class="sh_symbol">.</span>B<span class="sh_symbol">))</span> <span class="sh_symbol">*</span> u<span class="sh_symbol">.</span>C <span class="sh_symbol">&lt;</span> <span class="sh_symbol">-</span><span class="sh_number">7e-14</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span>

<span class="sh_type">int</span> <span class="sh_function">HPI</span><span class="sh_symbol">(</span><span class="sh_type">int</span> n<span class="sh_symbol">,</span> <span class="sh_usertype">line</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>l<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*</span>poly<span class="sh_symbol">,</span> <span class="sh_usertype">vec2</span><span class="sh_normal"> </span><span class="sh_symbol">*&amp;</span>ret<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span> <span class="sh_comment">// -1 : Unbounded, -2 : Infeasible</span>
	<span class="sh_type">int</span> h <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> t <span class="sh_symbol">=</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">,</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> que<span class="sh_symbol">[</span>n <span class="sh_symbol">+</span> <span class="sh_number">5</span><span class="sh_symbol">];</span>
	std<span class="sh_symbol">::</span><span class="sh_function">sort</span><span class="sh_symbol">(</span>l<span class="sh_symbol">,</span> l <span class="sh_symbol">+</span> n<span class="sh_symbol">,</span> HPIcmp<span class="sh_symbol">);</span>
	n <span class="sh_symbol">=</span> std<span class="sh_symbol">::</span><span class="sh_function">unique</span><span class="sh_symbol">(</span>l<span class="sh_symbol">,</span> l <span class="sh_symbol">+</span> n<span class="sh_symbol">,</span> sameDir<span class="sh_symbol">)</span> <span class="sh_symbol">-</span> l<span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n <span class="sh_symbol">&amp;&amp;</span> j <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(</span><span class="sh_function">up</span><span class="sh_symbol">(</span>j<span class="sh_symbol">,</span> i <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span> j <span class="sh_symbol">&lt;</span> n <span class="sh_symbol">&amp;&amp;</span> <span class="sh_symbol">!</span><span class="sh_function">geStraight</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span><span class="sh_function">normVec</span><span class="sh_symbol">(),</span> l<span class="sh_symbol">[</span>j<span class="sh_symbol">].</span><span class="sh_function">normVec</span><span class="sh_symbol">());</span> <span class="sh_symbol">++</span>j<span class="sh_symbol">);</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">para_nega_test</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> l<span class="sh_symbol">[</span>j<span class="sh_symbol">]))</span> <span class="sh_keyword">return</span> <span class="sh_symbol">-</span><span class="sh_number">2</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>n <span class="sh_symbol">&lt;=</span> <span class="sh_number">2</span> <span class="sh_symbol">||</span> <span class="sh_function">geStraight</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>n <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">].</span><span class="sh_function">normVec</span><span class="sh_symbol">(),</span> l<span class="sh_symbol">-&gt;</span><span class="sh_function">normVec</span><span class="sh_symbol">()))</span> <span class="sh_keyword">return</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> n<span class="sh_symbol">;</span> <span class="sh_symbol">++</span>i<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span> <span class="sh_symbol">(</span><span class="sh_function">geStraight</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>que<span class="sh_symbol">[</span>t<span class="sh_symbol">]].</span><span class="sh_function">normVec</span><span class="sh_symbol">(),</span> l<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span><span class="sh_function">normVec</span><span class="sh_symbol">()))</span> <span class="sh_keyword">return</span> <span class="sh_symbol">-</span><span class="sh_number">1</span><span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&lt;</span> t <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>i<span class="sh_symbol">](</span>poly<span class="sh_symbol">[</span>t <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span> <span class="sh_symbol">--</span>t<span class="sh_symbol">);</span>
		<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&lt;</span> t <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span>i<span class="sh_symbol">](</span>poly<span class="sh_symbol">[</span>h<span class="sh_symbol">]),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span> <span class="sh_symbol">++</span>h<span class="sh_symbol">);</span>
		que<span class="sh_symbol">[++</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span> h <span class="sh_symbol">&lt;</span> t <span class="sh_symbol">?</span> poly<span class="sh_symbol">[</span>t <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">intersection</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span> que<span class="sh_symbol">[</span>t <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]</span> <span class="sh_symbol">],</span> l<span class="sh_symbol">[</span> que<span class="sh_symbol">[</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">])</span> <span class="sh_symbol">:</span> <span class="sh_number">0</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_keyword">for</span> <span class="sh_symbol">(;</span> h <span class="sh_symbol">&lt;</span> t <span class="sh_symbol">&amp;&amp;</span> <span class="sh_function">le</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">]</span> <span class="sh_symbol">](</span>poly<span class="sh_symbol">[</span>t <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">]),</span> <span class="sh_number">0</span><span class="sh_symbol">);</span> <span class="sh_symbol">--</span>t<span class="sh_symbol">);</span>
	<span class="sh_keyword">return</span> h <span class="sh_symbol">==</span> t <span class="sh_symbol">?</span> <span class="sh_symbol">-</span><span class="sh_number">2</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span>poly<span class="sh_symbol">[</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">intersection</span><span class="sh_symbol">(</span>l<span class="sh_symbol">[</span> que<span class="sh_symbol">[</span>t<span class="sh_symbol">]</span> <span class="sh_symbol">],</span> l<span class="sh_symbol">[</span> que<span class="sh_symbol">[</span>h<span class="sh_symbol">]</span> <span class="sh_symbol">]),</span> ret <span class="sh_symbol">=</span> poly <span class="sh_symbol">+</span> h<span class="sh_symbol">,</span> t <span class="sh_symbol">-</span> h <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">);</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
