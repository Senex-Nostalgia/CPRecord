<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>并查集 (不封装，按秩合并)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_type">int</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">==</span> x <span class="sh_symbol">?</span> x <span class="sh_symbol">:</span> <span class="sh_symbol">(</span>p<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>p<span class="sh_symbol">[</span>x<span class="sh_symbol">]));</span><span class="sh_cbracket">}</span>

<span class="sh_type">bool</span> <span class="sh_function">test</span><span class="sh_symbol">(</span><span class="sh_type">int</span> x<span class="sh_symbol">,</span> <span class="sh_type">int</span> y<span class="sh_symbol">,</span> <span class="sh_type">bool</span> un <span class="sh_symbol">=</span> <span class="sh_keyword">false</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">((</span>x <span class="sh_symbol">=</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>x<span class="sh_symbol">))</span> <span class="sh_symbol">==</span> <span class="sh_symbol">(</span>y <span class="sh_symbol">=</span> <span class="sh_function">ancestor</span><span class="sh_symbol">(</span>y<span class="sh_symbol">)))</span> <span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
	<span class="sh_keyword">if</span> <span class="sh_symbol">(</span>un<span class="sh_symbol">)</span> size<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">&gt;</span> size<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">?</span> std<span class="sh_symbol">::</span><span class="sh_function">swap</span><span class="sh_symbol">(</span>x<span class="sh_symbol">,</span> y<span class="sh_symbol">)</span> <span class="sh_symbol">:</span> <span class="sh_symbol">(</span><span class="sh_type">void</span><span class="sh_symbol">)</span><span class="sh_number">0</span><span class="sh_symbol">,</span> p<span class="sh_symbol">[</span>x<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> y<span class="sh_symbol">,</span> size<span class="sh_symbol">[</span>y<span class="sh_symbol">]</span> <span class="sh_symbol">+=</span> size<span class="sh_symbol">[</span>x<span class="sh_symbol">];</span>
	<span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
