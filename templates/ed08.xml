<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>Gauss 消元法</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_comment">// Gauss elimination with type 'double'</span>
<span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">LnEqn</span><span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> sz<span class="sh_symbol">;</span>
	<span class="sh_type">double</span> <span class="sh_symbol">**</span>m<span class="sh_symbol">,</span> <span class="sh_symbol">*</span>b<span class="sh_symbol">;</span>
	<span class="sh_function">LnEqn</span> <span class="sh_symbol">():</span> <span class="sh_function">sz</span><span class="sh_symbol">(</span><span class="sh_number">0</span><span class="sh_symbol">)</span> <span class="sh_cbracket">{</span>m <span class="sh_symbol">=</span> NULL<span class="sh_symbol">;</span> b <span class="sh_symbol">=</span> NULL<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
	<span class="sh_type">void</span> <span class="sh_function">resize</span><span class="sh_symbol">(</span><span class="sh_type">int</span> size<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
		sz <span class="sh_symbol">=</span> size<span class="sh_symbol">;</span> m <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">double</span> <span class="sh_symbol">*[</span>sz<span class="sh_symbol">];</span>
		<span class="sh_keyword">for</span><span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
			m<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">double</span><span class="sh_symbol">[</span>sz<span class="sh_symbol">];</span>
			<span class="sh_function">memset</span><span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>i<span class="sh_symbol">],</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> sz <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">3</span><span class="sh_symbol">);</span>
		<span class="sh_cbracket">}</span>
		b <span class="sh_symbol">=</span> <span class="sh_keyword">new</span> <span class="sh_type">double</span><span class="sh_symbol">[</span>sz<span class="sh_symbol">];</span>
		<span class="sh_function">memset</span><span class="sh_symbol">(</span>b<span class="sh_symbol">,</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> sz <span class="sh_symbol">&lt;&lt;</span> <span class="sh_number">3</span><span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_symbol">~</span><span class="sh_function">LnEqn</span> <span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>m<span class="sh_symbol">)</span> <span class="sh_cbracket">{</span><span class="sh_keyword">for</span><span class="sh_symbol">(</span><span class="sh_type">int</span> i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>i<span class="sh_symbol">]);</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>m<span class="sh_symbol">);</span><span class="sh_cbracket">}</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(</span>b<span class="sh_symbol">)</span> <span class="sh_keyword">delete</span> <span class="sh_symbol">[]</span> <span class="sh_symbol">(</span>b<span class="sh_symbol">);</span>
	<span class="sh_cbracket">}</span>
	<span class="sh_type">bool</span> <span class="sh_function">solve</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
		<span class="sh_type">int</span> i<span class="sh_symbol">,</span> j<span class="sh_symbol">,</span> k<span class="sh_symbol">,</span> maxi<span class="sh_symbol">;</span> <span class="sh_type">double</span> coe<span class="sh_symbol">;</span>
		<span class="sh_keyword">for</span><span class="sh_symbol">(</span>k <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> k <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> k<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
			maxi <span class="sh_symbol">=</span> k<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> k <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span>
				<span class="sh_keyword">if</span><span class="sh_symbol">(</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>k<span class="sh_symbol">])</span> <span class="sh_symbol">&gt;</span> <span class="sh_function">fabs</span><span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>maxi<span class="sh_symbol">][</span>k<span class="sh_symbol">]))</span>
					maxi <span class="sh_symbol">=</span> i<span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span><span class="sh_symbol">(</span><span class="sh_function">fabs</span><span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>maxi<span class="sh_symbol">][</span>k<span class="sh_symbol">])</span> <span class="sh_symbol">&lt;</span> <span class="sh_number">1e-8</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span> <span class="sh_keyword">false</span><span class="sh_symbol">;</span>
			<span class="sh_keyword">if</span><span class="sh_symbol">(</span>maxi <span class="sh_symbol">!=</span> k<span class="sh_symbol">)</span><span class="sh_cbracket">{</span>
				<span class="sh_function">swap</span><span class="sh_symbol">(</span>m<span class="sh_symbol">[</span>maxi<span class="sh_symbol">],</span> m<span class="sh_symbol">[</span>k<span class="sh_symbol">]);</span>
				<span class="sh_function">swap</span><span class="sh_symbol">(</span>b<span class="sh_symbol">[</span>maxi<span class="sh_symbol">],</span> b<span class="sh_symbol">[</span>k<span class="sh_symbol">]);</span>
			<span class="sh_cbracket">}</span>
			coe <span class="sh_symbol">=</span> <span class="sh_number">1.0</span> <span class="sh_symbol">/</span> m<span class="sh_symbol">[</span>k<span class="sh_symbol">][</span>k<span class="sh_symbol">];</span>
			<span class="sh_keyword">for</span><span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> j<span class="sh_symbol">++)</span>
				m<span class="sh_symbol">[</span>k<span class="sh_symbol">][</span>j<span class="sh_symbol">]</span> <span class="sh_symbol">*=</span> coe<span class="sh_symbol">;</span>
			m<span class="sh_symbol">[</span>k<span class="sh_symbol">][</span>k<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">1.0</span><span class="sh_symbol">;</span>
			b<span class="sh_symbol">[</span>k<span class="sh_symbol">]</span> <span class="sh_symbol">*=</span> coe<span class="sh_symbol">;</span>
			<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span><span class="sh_cbracket">{</span>
				<span class="sh_keyword">if</span><span class="sh_symbol">(</span>i <span class="sh_symbol">==</span> k<span class="sh_symbol">)</span> <span class="sh_keyword">continue</span><span class="sh_symbol">;</span>
				coe <span class="sh_symbol">=</span> m<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>k<span class="sh_symbol">];</span>
				<span class="sh_keyword">for</span><span class="sh_symbol">(</span>j <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">;</span> j <span class="sh_symbol">&lt;</span> sz<span class="sh_symbol">;</span> j<span class="sh_symbol">++)</span>
					m<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>j<span class="sh_symbol">]</span> <span class="sh_symbol">-=</span> coe <span class="sh_symbol">*</span> m<span class="sh_symbol">[</span>k<span class="sh_symbol">][</span>j<span class="sh_symbol">];</span>
				m<span class="sh_symbol">[</span>i<span class="sh_symbol">][</span>k<span class="sh_symbol">]</span> <span class="sh_symbol">=</span> <span class="sh_number">0.0</span><span class="sh_symbol">;</span>
				b<span class="sh_symbol">[</span>i<span class="sh_symbol">]</span> <span class="sh_symbol">-=</span> coe <span class="sh_symbol">*</span> b<span class="sh_symbol">[</span>k<span class="sh_symbol">];</span>
			<span class="sh_cbracket">}</span>
		<span class="sh_cbracket">}</span>
		<span class="sh_keyword">return</span> <span class="sh_keyword">true</span><span class="sh_symbol">;</span>
	<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span></code></pre>
</template>
