<?xml version="1.0" encoding="utf-8"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/pgmain.min.css"?>
<?xml-stylesheet type="text/css" href="../additional_files/css/sh_typical.min.css"?>

<template>
<title>最小生成树 (Kruskal)</title>
<pre class="sh_sourceCode"><code class="sh_cpp"><span class="sh_keyword">struct</span><span class="sh_normal"> </span><span class="sh_classname">edge</span> <span class="sh_cbracket">{</span>
	<span class="sh_type">int</span> u<span class="sh_symbol">,</span> v<span class="sh_symbol">,</span> w<span class="sh_symbol">;</span>
	<span class="sh_function">edge</span> <span class="sh_symbol">(</span><span class="sh_type">int</span> u0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> v0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">,</span> <span class="sh_type">int</span> w0 <span class="sh_symbol">=</span> <span class="sh_number">0</span><span class="sh_symbol">):</span> <span class="sh_function">u</span><span class="sh_symbol">(</span>u0<span class="sh_symbol">),</span> <span class="sh_function">v</span><span class="sh_symbol">(</span>v0<span class="sh_symbol">),</span> <span class="sh_function">w</span><span class="sh_symbol">(</span>w0<span class="sh_symbol">)</span> <span class="sh_cbracket">{}</span>
	<span class="sh_type">bool</span> <span class="sh_keyword">operator</span> <span class="sh_symbol">&lt;</span> <span class="sh_symbol">(</span><span class="sh_keyword">const</span> <span class="sh_usertype">edge</span><span class="sh_normal"> </span><span class="sh_symbol">&amp;</span>b<span class="sh_symbol">)</span> <span class="sh_keyword">const</span> <span class="sh_cbracket">{</span><span class="sh_keyword">return</span> w <span class="sh_symbol">&lt;</span> b<span class="sh_symbol">.</span>w<span class="sh_symbol">;</span><span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span><span class="sh_symbol">;</span>

<span class="sh_type">void</span> <span class="sh_function">Kruskal</span><span class="sh_symbol">()</span><span class="sh_cbracket">{</span>
	uf<span class="sh_symbol">.</span><span class="sh_function">resize</span><span class="sh_symbol">(</span>V<span class="sh_symbol">);</span>
	<span class="sh_function">sort</span><span class="sh_symbol">(</span>e <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">,</span> e <span class="sh_symbol">+</span> <span class="sh_symbol">(</span>E <span class="sh_symbol">+</span> <span class="sh_number">1</span><span class="sh_symbol">));</span>
	<span class="sh_keyword">for</span><span class="sh_symbol">(</span>i <span class="sh_symbol">=</span> <span class="sh_number">1</span><span class="sh_symbol">;</span> i <span class="sh_symbol">&lt;=</span> E<span class="sh_symbol">;</span> i<span class="sh_symbol">++)</span>
		<span class="sh_keyword">if</span><span class="sh_symbol">(!</span>uf<span class="sh_symbol">.</span><span class="sh_function">test</span><span class="sh_symbol">(</span>e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>u<span class="sh_symbol">,</span> e<span class="sh_symbol">[</span>i<span class="sh_symbol">].</span>v<span class="sh_symbol">,</span> <span class="sh_keyword">true</span><span class="sh_symbol">))</span><span class="sh_cbracket">{</span>
			<span class="sh_comment">// e is an edge of minimum spanning tree</span>
			<span class="sh_keyword">if</span><span class="sh_symbol">(++</span>Es <span class="sh_symbol">&gt;=</span> V <span class="sh_symbol">-</span> <span class="sh_number">1</span><span class="sh_symbol">)</span> <span class="sh_keyword">return</span><span class="sh_symbol">;</span>
		<span class="sh_cbracket">}</span>
<span class="sh_cbracket">}</span></code></pre>
</template>
